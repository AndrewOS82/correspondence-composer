// Package policyapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.13.4 DO NOT EDIT.
package policyapi

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	openapi_types "github.com/deepmap/oapi-codegen/pkg/types"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	Auth0Scopes = "Auth0.Scopes"
)

// Defines values for AccountInfoSourceSystem.
const (
	AccountInfoSourceSystemLC AccountInfoSourceSystem = "LC"
)

// Defines values for CashValuesItemSourceSystem.
const (
	CashValuesItemSourceSystemLC CashValuesItemSourceSystem = "LC"
)

// Defines values for FundValuesItemSourceSystem.
const (
	FundValuesItemSourceSystemLC FundValuesItemSourceSystem = "LC"
)

// Defines values for ItemSourceSystem.
const (
	ItemSourceSystemLC ItemSourceSystem = "LC"
)

// Defines values for LinkBankingItemSourceSystem.
const (
	LinkBankingItemSourceSystemLC LinkBankingItemSourceSystem = "LC"
)

// Defines values for PeopleSourceSystem.
const (
	PeopleSourceSystemLC PeopleSourceSystem = "LC"
)

// AccountInfo defines model for AccountInfo.
type AccountInfo struct {
	ApplicationDate         time.Time               `json:"ApplicationDate"`
	CashValue               float32                 `json:"CashValue"`
	ContractId              string                  `json:"ContractId"`
	ContractNumber          string                  `json:"ContractNumber"`
	ContractStatus          string                  `json:"ContractStatus"`
	CovId                   string                  `json:"CovId"`
	DeathBenefit            string                  `json:"DeathBenefit"`
	EffectiveDate           time.Time               `json:"EffectiveDate"`
	FaceAmount              float32                 `json:"FaceAmount"`
	IssueDate               time.Time               `json:"IssueDate"`
	IssueState              string                  `json:"IssueState"`
	JurisdictionStateCode   string                  `json:"JurisdictionStateCode"`
	LastUpdated             time.Time               `json:"LastUpdated"`
	LengthofTerm            float32                 `json:"LengthofTerm"`
	MVAProduct              string                  `json:"MVAProduct"`
	MaturityDate            time.Time               `json:"MaturityDate"`
	ModifiedEndowmentStatus string                  `json:"ModifiedEndowmentStatus"`
	Owners                  []Owner                 `json:"Owners"`
	PlanCode                string                  `json:"PlanCode"`
	ProductCategory         string                  `json:"ProductCategory"`
	ProductCompanyId        float32                 `json:"ProductCompanyId"`
	ProductLine             string                  `json:"ProductLine"`
	ProductName             string                  `json:"ProductName"`
	ProductShareClass       string                  `json:"ProductShareClass"`
	QualTypeCode            string                  `json:"QualTypeCode"`
	QualTypeDesc            string                  `json:"QualTypeDesc"`
	SourceSystem            AccountInfoSourceSystem `json:"SourceSystem"`
	TokenID                 string                  `json:"TokenID"`
}

// AccountInfoSourceSystem defines model for AccountInfo.SourceSystem.
type AccountInfoSourceSystem string

// Address defines model for Address.
type Address struct {
	ActiveAddress    bool      `json:"ActiveAddress"`
	AddressEndDate   time.Time `json:"AddressEndDate"`
	AddressLine1     string    `json:"AddressLine1"`
	AddressStartDate time.Time `json:"AddressStartDate"`
	AddressType      string    `json:"AddressType"`
	AddressTypeDesc  string    `json:"AddressTypeDesc"`
	City             string    `json:"City"`
	Country          string    `json:"Country"`
	MailIndicator    bool      `json:"MailIndicator"`
	SrcAddressId     float32   `json:"SrcAddressId"`
	State            string    `json:"State"`
	Zip              string    `json:"Zip"`
}

// BankInfo defines model for BankInfo.
type BankInfo struct {
	AccountNumber string  `json:"AccountNumber"`
	AccountType   string  `json:"AccountType"`
	BankID        float32 `json:"BankID"`
	PaymentType   string  `json:"PaymentType"`
}

// Banking defines model for Banking.
type Banking struct {
	AccountNumber string    `json:"AccountNumber"`
	AccountType   string    `json:"AccountType"`
	BankEndDate   time.Time `json:"BankEndDate"`
	BankId        float32   `json:"BankId"`
	BankName      string    `json:"BankName"`
	BankStartDate time.Time `json:"BankStartDate"`
	ListBillId    float32   `json:"ListBillId"`
	PaymentMethod string    `json:"PaymentMethod"`
	Purpose       string    `json:"Purpose"`
	RoutingNumber string    `json:"RoutingNumber"`
}

// BeneficiaryAllocation defines model for BeneficiaryAllocation.
type BeneficiaryAllocation struct {
	AllocationPercentage float32 `json:"allocationPercentage"`
	PartyPolicyId        string  `json:"partyPolicyId"`
}

// CashValues defines model for CashValues.
type CashValues struct {
	Items []CashValuesItem `json:"Items"`
}

// CashValuesItem defines model for CashValuesItem.
type CashValuesItem struct {
	AccountValue                      float32                    `json:"AccountValue"`
	AsOfDate                          time.Time                  `json:"AsOfDate"`
	CashValue                         float32                    `json:"CashValue"`
	CumulativePremiumAmount           float32                    `json:"CumulativePremiumAmount"`
	DeathBenefitAmount                float32                    `json:"DeathBenefitAmount"`
	DeathBenefitValue                 float32                    `json:"DeathBenefitValue"`
	FreeWithdrawalAmount              float32                    `json:"FreeWithdrawalAmount"`
	FreeWithdrawalRemaining           float32                    `json:"FreeWithdrawalRemaining"`
	GWB                               float32                    `json:"GWB"`
	GuaranteedAnnualPaymen            float32                    `json:"GuaranteedAnnualPaymen"`
	GuaranteedCashSurrenderValue      float32                    `json:"GuaranteedCashSurrenderValue"`
	GuaranteedCashSurrenderValueIndex float32                    `json:"GuaranteedCashSurrenderValueIndex"`
	GuaranteedMinimumDeathBenefit     float32                    `json:"GuaranteedMinimumDeathBenefit"`
	LoanPrinciple                     float32                    `json:"LoanPrinciple"`
	MinimumDeathBenefit               float32                    `json:"MinimumDeathBenefit"`
	NetCashSurrenderValue             float32                    `json:"NetCashSurrenderValue"`
	RequiredMinimumDistribution       float32                    `json:"RequiredMinimumDistribution"`
	SourceSystem                      CashValuesItemSourceSystem `json:"SourceSystem"`
	SurrenderCharge                   float32                    `json:"SurrenderCharge"`
	TotalWithdrawal                   float32                    `json:"TotalWithdrawal"`
	YtdPremiumAmount                  float32                    `json:"YtdPremiumAmount"`
	YtdWithdrawal                     float32                    `json:"YtdWithdrawal"`
}

// CashValuesItemSourceSystem defines model for CashValuesItem.SourceSystem.
type CashValuesItemSourceSystem string

// DisbursementDetails defines model for DisbursementDetails.
type DisbursementDetails struct {
	BankInfo            BankInfo `json:"BankInfo"`
	ExistingPayeeNameID float32  `json:"ExistingPayeeNameID"`
	ExistingPayeeRoleID string   `json:"ExistingPayeeRoleID"`
	PayeeType           string   `json:"PayeeType"`
}

// FromFund defines model for FromFund.
type FromFund struct {
	FundAmountType string  `json:"FundAmountType"`
	FundCode       string  `json:"FundCode"`
	FundValue      float32 `json:"FundValue"`
}

// FundValues defines model for FundValues.
type FundValues struct {
	Items []FundValuesItem `json:"Items"`
}

// FundValuesItem defines model for FundValuesItem.
type FundValuesItem struct {
	AsOfDate        time.Time                  `json:"AsOfDate"`
	AssetSource     string                     `json:"AssetSource"`
	AssetSourceCode string                     `json:"AssetSourceCode"`
	FundId          string                     `json:"FundId"`
	FundName        string                     `json:"FundName"`
	FundType        string                     `json:"FundType"`
	IndexBOP        string                     `json:"IndexBOP"`
	InterestRate    string                     `json:"InterestRate"`
	SourceSystem    FundValuesItemSourceSystem `json:"SourceSystem"`
	SrcFundName     string                     `json:"SrcFundName"`
	UnitValue       string                     `json:"UnitValue"`
	Units           string                     `json:"Units"`
	Value           string                     `json:"Value"`
}

// FundValuesItemSourceSystem defines model for FundValuesItem.SourceSystem.
type FundValuesItemSourceSystem string

// Item defines model for Item.
type Item struct {
	Alert            string           `json:"Alert"`
	NoteCategoryDesc string           `json:"NoteCategoryDesc"`
	NoteDate         time.Time        `json:"NoteDate"`
	NoteText         string           `json:"NoteText"`
	SourceSystem     ItemSourceSystem `json:"SourceSystem"`
}

// ItemSourceSystem defines model for Item.SourceSystem.
type ItemSourceSystem string

// LinkBanking defines model for LinkBanking.
type LinkBanking struct {
	Items []LinkBankingItem `json:"Items"`
}

// LinkBankingItem defines model for LinkBankingItem.
type LinkBankingItem struct {
	ABANumber       string                      `json:"ABANumber"`
	AccountNumber   string                      `json:"AccountNumber"`
	BankEndDate     time.Time                   `json:"BankEndDate"`
	BankId          string                      `json:"BankId"`
	BankName        string                      `json:"BankName"`
	BankStartDate   time.Time                   `json:"BankStartDate"`
	BankingTypeDesc string                      `json:"BankingTypeDesc"`
	SourceSystem    LinkBankingItemSourceSystem `json:"SourceSystem"`
}

// LinkBankingItemSourceSystem defines model for LinkBankingItem.SourceSystem.
type LinkBankingItemSourceSystem string

// Metric defines model for Metric.
type Metric struct {
	Name   string       `json:"name"`
	Values MetricValues `json:"values"`
}

// MetricValues defines model for MetricValues.
type MetricValues struct {
	AdditionalProp1 float32 `json:"additionalProp1"`
	AdditionalProp2 float32 `json:"additionalProp2"`
	AdditionalProp3 float32 `json:"additionalProp3"`
}

// MetricsRequest defines model for MetricsRequest.
type MetricsRequest struct {
	EndDate   openapi_types.Date `json:"endDate"`
	Metrics   string             `json:"metrics"`
	StartDate openapi_types.Date `json:"startDate"`
}

// MetricsResponse defines model for MetricsResponse.
type MetricsResponse struct {
	Metrics      []Metric `json:"metrics"`
	PolicyNumber string   `json:"policyNumber"`
}

// NotesInfo defines model for NotesInfo.
type NotesInfo struct {
	Count float32 `json:"Count"`
	Items []Item  `json:"Items"`
}

// Owner defines model for Owner.
type Owner struct {
	FirstName      string `json:"FirstName"`
	FullName       string `json:"FullName"`
	LastName       string `json:"LastName"`
	OrgName        string `json:"OrgName"`
	PersonType     string `json:"PersonType"`
	PersonTypeDesc string `json:"PersonTypeDesc"`
}

// People defines model for People.
type People struct {
	Address             []Address          `json:"Address"`
	Banking             []Banking          `json:"Banking"`
	DateOfBirth         time.Time          `json:"DateOfBirth"`
	Email               string             `json:"Email"`
	FirstName           string             `json:"FirstName"`
	FullName            string             `json:"FullName"`
	LastName            string             `json:"LastName"`
	MiddleName          string             `json:"MiddleName"`
	OrgName             string             `json:"OrgName"`
	PersonType          string             `json:"PersonType"`
	Phone               []Phone            `json:"Phone"`
	Role                string             `json:"Role"`
	RoleEndDate         time.Time          `json:"RoleEndDate"`
	RoleStartDate       time.Time          `json:"RoleStartDate"`
	RoleStatus          string             `json:"RoleStatus"`
	SourceSystem        PeopleSourceSystem `json:"SourceSystem"`
	SrcNameId           float32            `json:"SrcNameId"`
	SrcPartyType        string             `json:"SrcPartyType"`
	SrcRole             string             `json:"SrcRole"`
	SrcRoleOptionIdDesc string             `json:"SrcRoleOptionIdDesc"`
	SrcRoleType         float32            `json:"SrcRoleType"`
	TaxID               string             `json:"TaxID"`
	TaxWithHolding      []TaxWithHolding   `json:"TaxWithHolding"`
}

// PeopleSourceSystem defines model for People.SourceSystem.
type PeopleSourceSystem string

// Phone defines model for Phone.
type Phone struct {
	PhoneCountry  string `json:"PhoneCountry"`
	PhoneNumber   string `json:"PhoneNumber"`
	PhoneType     string `json:"PhoneType"`
	PhoneTypeDesc string `json:"PhoneTypeDesc"`
}

// Quote defines model for Quote.
type Quote struct {
	ClientCode      string       `json:"ClientCode"`
	ContractNumber  string       `json:"ContractNumber"`
	PlanCode        string       `json:"PlanCode"`
	TransactionDate string       `json:"TransactionDate"`
	TransactionTime string       `json:"TransactionTime"`
	UserID          string       `json:"UserID"`
	Withdrawal      []Withdrawal `json:"Withdrawal"`
}

// SearchPolicyRequest defines model for SearchPolicyRequest.
type SearchPolicyRequest struct {
	FirstName    string `json:"firstName"`
	LastName     string `json:"lastName"`
	PolicyNumber string `json:"policyNumber"`
	Ssn          string `json:"ssn"`
}

// TaxWithHolding defines model for TaxWithHolding.
type TaxWithHolding struct {
	Exemption    float32 `json:"Exemption"`
	FilingStatus string  `json:"FilingStatus"`
	TaxRate      string  `json:"TaxRate"`
	Type         string  `json:"Type"`
}

// TaxWithholding defines model for TaxWithholding.
type TaxWithholding struct {
	Amount        float32 `json:"Amount"`
	Exemption     float32 `json:"Exemption"`
	FillingStatus string  `json:"FillingStatus"`
	Place         string  `json:"Place"`
	Type          string  `json:"Type"`
}

// UpdateBeneficiaryRequest defines model for UpdateBeneficiaryRequest.
type UpdateBeneficiaryRequest struct {
	BeneficiaryAllocation []BeneficiaryAllocation `json:"beneficiaryAllocation"`
	BeneficiaryPercentage float32                 `json:"beneficiaryPercentage"`
	EndDate               string                  `json:"endDate"`
	StartDate             string                  `json:"startDate"`
}

// Waivers defines model for Waivers.
type Waivers struct {
	OvernightCheck         string `json:"OvernightCheck"`
	SuppressCheck          string `json:"SuppressCheck"`
	SuppressConfirm        string `json:"SuppressConfirm"`
	WaiveBonusRecap        string `json:"WaiveBonusRecap"`
	WaiveCharges           string `json:"WaiveCharges"`
	WaiveEIAdjustment      string `json:"WaiveEIAdjustment"`
	WaiveLimits            string `json:"WaiveLimits"`
	WaiveMVA               string `json:"WaiveMVA"`
	WaiveOvernightCheckFee string `json:"WaiveOvernightCheckFee"`
	WaiveWireFee           string `json:"WaiveWireFee"`
	WireFurtherCreditTo    string `json:"WireFurtherCreditTo"`
}

// Withdrawal defines model for Withdrawal.
type Withdrawal struct {
	AmountType             string              `json:"AmountType"`
	DisbursementDetails    DisbursementDetails `json:"DisbursementDetails"`
	DocumentNumber         string              `json:"DocumentNumber"`
	FromFunds              FromFund            `json:"FromFunds"`
	ProgramSubType         string              `json:"ProgramSubType"`
	ProgramType            string              `json:"ProgramType"`
	ReasonForDistribution  string              `json:"ReasonForDistribution"`
	RequestedFromFundValue float32             `json:"RequestedFromFundValue"`
	TaxWithholding         []TaxWithholding    `json:"TaxWithholding"`
	Waivers                Waivers             `json:"Waivers"`
}

// AppControllerGetPolicyAccountInfoParams defines parameters for AppControllerGetPolicyAccountInfo.
type AppControllerGetPolicyAccountInfoParams struct {
	PolicyNumber string `form:"policyNumber" json:"policyNumber"`
	ClientCode   string `form:"clientCode" json:"clientCode"`

	// PlanNumber plan number, not required
	PlanNumber *string `form:"planNumber,omitempty" json:"planNumber,omitempty"`

	// SourceSystem source system, defaults to LC
	SourceSystem  *string `form:"sourceSystem,omitempty" json:"sourceSystem,omitempty"`
	Authorization string  `json:"Authorization"`
}

// AppControllerGetPolicyCashValuesParams defines parameters for AppControllerGetPolicyCashValues.
type AppControllerGetPolicyCashValuesParams struct {
	PolicyNumber string `form:"policyNumber" json:"policyNumber"`
	ClientCode   string `form:"clientCode" json:"clientCode"`

	// PlanNumber plan number, not required
	PlanNumber *string `form:"planNumber,omitempty" json:"planNumber,omitempty"`

	// AsOfDate date as of
	AsOfDate *time.Time `form:"asOfDate,omitempty" json:"asOfDate,omitempty"`

	// SourceSystem source system, defaults to LC
	SourceSystem  *string `form:"sourceSystem,omitempty" json:"sourceSystem,omitempty"`
	Authorization string  `json:"Authorization"`
}

// AppControllerGetPolicyFundValuesParams defines parameters for AppControllerGetPolicyFundValues.
type AppControllerGetPolicyFundValuesParams struct {
	PolicyNumber string `form:"policyNumber" json:"policyNumber"`
	ClientCode   string `form:"clientCode" json:"clientCode"`

	// PlanNumber plan number, not required
	PlanNumber *string `form:"planNumber,omitempty" json:"planNumber,omitempty"`

	// AsOfDate date as of
	AsOfDate *time.Time `form:"asOfDate,omitempty" json:"asOfDate,omitempty"`

	// SourceSystem source system, defaults to LC
	SourceSystem  *string `form:"sourceSystem,omitempty" json:"sourceSystem,omitempty"`
	Authorization string  `json:"Authorization"`
}

// AppControllerGetPolicyLinkBankingParams defines parameters for AppControllerGetPolicyLinkBanking.
type AppControllerGetPolicyLinkBankingParams struct {
	PolicyNumber string `form:"policyNumber" json:"policyNumber"`
	ClientCode   string `form:"clientCode" json:"clientCode"`
	PartyId      string `form:"partyId" json:"partyId"`

	// EffectiveDate effective date
	EffectiveDate *time.Time `form:"effectiveDate,omitempty" json:"effectiveDate,omitempty"`

	// SourceSystem source system, defaults to LC
	SourceSystem  *string `form:"sourceSystem,omitempty" json:"sourceSystem,omitempty"`
	Authorization string  `json:"Authorization"`
}

// AppControllerGetPolicyNotesInfoParams defines parameters for AppControllerGetPolicyNotesInfo.
type AppControllerGetPolicyNotesInfoParams struct {
	PolicyNumber string `form:"policyNumber" json:"policyNumber"`
	ClientCode   string `form:"clientCode" json:"clientCode"`

	// SourceSystem source system, defaults to LC
	SourceSystem *string `form:"sourceSystem,omitempty" json:"sourceSystem,omitempty"`

	// Offset index of where to start your search query
	Offset *string `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit number of items to return in the search query
	Limit *string `form:"limit,omitempty" json:"limit,omitempty"`

	// OrderBy which field to sort your query by
	OrderBy *string `form:"orderBy,omitempty" json:"orderBy,omitempty"`

	// OrderByDirection sort direction of the query
	OrderByDirection *string `form:"orderByDirection,omitempty" json:"orderByDirection,omitempty"`
	Authorization    string  `json:"Authorization"`
}

// AppControllerGetPolicyPeopleParams defines parameters for AppControllerGetPolicyPeople.
type AppControllerGetPolicyPeopleParams struct {
	PolicyNumber string `form:"policyNumber" json:"policyNumber"`
	ClientCode   string `form:"clientCode" json:"clientCode"`

	// PlanNumber plan number, not required
	PlanNumber *string `form:"planNumber,omitempty" json:"planNumber,omitempty"`

	// SourceSystem source system, defaults to LC
	SourceSystem *string `form:"sourceSystem,omitempty" json:"sourceSystem,omitempty"`

	// IncludeAllAddresses whether to include all addresses or not
	IncludeAllAddresses *bool  `form:"includeAllAddresses,omitempty" json:"includeAllAddresses,omitempty"`
	Authorization       string `json:"Authorization"`
}

// AppControllerCreatePolicyQuoteParams defines parameters for AppControllerCreatePolicyQuote.
type AppControllerCreatePolicyQuoteParams struct {
	ClientCode    string `form:"clientCode" json:"clientCode"`
	Authorization string `json:"Authorization"`
}

// PolicySearchControllerSearchPoliciesParams defines parameters for PolicySearchControllerSearchPolicies.
type PolicySearchControllerSearchPoliciesParams struct {
	Offset        float32 `form:"offset" json:"offset"`
	Limit         float32 `form:"limit" json:"limit"`
	Authorization string  `json:"Authorization"`
}

// AppControllerGetTransactionHistoryParams defines parameters for AppControllerGetTransactionHistory.
type AppControllerGetTransactionHistoryParams struct {
	PolicyNumber string `form:"policyNumber" json:"policyNumber"`
	ClientCode   string `form:"clientCode" json:"clientCode"`

	// SourceSystem source system, defaults to LC
	SourceSystem *string `form:"sourceSystem,omitempty" json:"sourceSystem,omitempty"`

	// Offset index of where to start your search query
	Offset *string `form:"offset,omitempty" json:"offset,omitempty"`

	// Limit number of items to return in the search query
	Limit *string `form:"limit,omitempty" json:"limit,omitempty"`

	// TransactionType transaction type
	TransactionType *string `form:"transactionType,omitempty" json:"transactionType,omitempty"`

	// TransactionStatus Transaction Status
	TransactionStatus *string `form:"transactionStatus,omitempty" json:"transactionStatus,omitempty"`

	// TypeDesc Description of the transaction type
	TypeDesc      *string `form:"typeDesc,omitempty" json:"typeDesc,omitempty"`
	Authorization string  `json:"Authorization"`
}

// AppControllerGetPolicyParams defines parameters for AppControllerGetPolicy.
type AppControllerGetPolicyParams struct {
	Authorization string `json:"Authorization"`
}

// AppControllerGetPolicyCoverageParams defines parameters for AppControllerGetPolicyCoverage.
type AppControllerGetPolicyCoverageParams struct {
	Authorization string `json:"Authorization"`
}

// AppControllerGetPolicyDistributionParams defines parameters for AppControllerGetPolicyDistribution.
type AppControllerGetPolicyDistributionParams struct {
	Authorization string `json:"Authorization"`
}

// AppControllerGetPolicyFeaturesParams defines parameters for AppControllerGetPolicyFeatures.
type AppControllerGetPolicyFeaturesParams struct {
	Authorization string `json:"Authorization"`
}

// AppControllerGetPolicyMetricsParams defines parameters for AppControllerGetPolicyMetrics.
type AppControllerGetPolicyMetricsParams struct {
	Authorization string `json:"Authorization"`
}

// AppControllerGetPolicyPartiesParams defines parameters for AppControllerGetPolicyParties.
type AppControllerGetPolicyPartiesParams struct {
	Authorization string `json:"Authorization"`
}

// AppControllerCreateAddressParams defines parameters for AppControllerCreateAddress.
type AppControllerCreateAddressParams struct {
	Authorization string `json:"Authorization"`
}

// AppControllerAddEndDateToAddressParams defines parameters for AppControllerAddEndDateToAddress.
type AppControllerAddEndDateToAddressParams struct {
	Authorization string `json:"Authorization"`
}

// AppControllerAddEndDateAndCreateAddressParams defines parameters for AppControllerAddEndDateAndCreateAddress.
type AppControllerAddEndDateAndCreateAddressParams struct {
	Authorization string `json:"Authorization"`
}

// AppControllerDeleteBeneficiaryParams defines parameters for AppControllerDeleteBeneficiary.
type AppControllerDeleteBeneficiaryParams struct {
	Authorization string `json:"Authorization"`
}

// AppControllerAddBeneficiaryParams defines parameters for AppControllerAddBeneficiary.
type AppControllerAddBeneficiaryParams struct {
	Authorization string `json:"Authorization"`
}

// AppControllerUpdateBeneficiaryParams defines parameters for AppControllerUpdateBeneficiary.
type AppControllerUpdateBeneficiaryParams struct {
	Authorization string `json:"Authorization"`
}

// AppControllerUpdateCommunicationPreferenceParams defines parameters for AppControllerUpdateCommunicationPreference.
type AppControllerUpdateCommunicationPreferenceParams struct {
	Authorization string `json:"Authorization"`
}

// AppControllerCreateEmailAddressParams defines parameters for AppControllerCreateEmailAddress.
type AppControllerCreateEmailAddressParams struct {
	Authorization string `json:"Authorization"`
}

// AppControllerAddEndDateToEmailAddressParams defines parameters for AppControllerAddEndDateToEmailAddress.
type AppControllerAddEndDateToEmailAddressParams struct {
	Authorization string `json:"Authorization"`
}

// AppControllerAddEndDateAndCreateEmailAddressParams defines parameters for AppControllerAddEndDateAndCreateEmailAddress.
type AppControllerAddEndDateAndCreateEmailAddressParams struct {
	Authorization string `json:"Authorization"`
}

// AppControllerAddOwnerParams defines parameters for AppControllerAddOwner.
type AppControllerAddOwnerParams struct {
	Authorization string `json:"Authorization"`
}

// AppControllerUpdatePartyNameParams defines parameters for AppControllerUpdatePartyName.
type AppControllerUpdatePartyNameParams struct {
	Authorization string `json:"Authorization"`
}

// AppControllerAddPayeeParams defines parameters for AppControllerAddPayee.
type AppControllerAddPayeeParams struct {
	Authorization string `json:"Authorization"`
}

// AppControllerAddPayorParams defines parameters for AppControllerAddPayor.
type AppControllerAddPayorParams struct {
	Authorization string `json:"Authorization"`
}

// AppControllerUpdatePhoneNumberParams defines parameters for AppControllerUpdatePhoneNumber.
type AppControllerUpdatePhoneNumberParams struct {
	Authorization string `json:"Authorization"`
}

// AppControllerAddEndDateToPhoneNumberParams defines parameters for AppControllerAddEndDateToPhoneNumber.
type AppControllerAddEndDateToPhoneNumberParams struct {
	Authorization string `json:"Authorization"`
}

// AppControllerAddEndDateAndCreatePhoneNumberParams defines parameters for AppControllerAddEndDateAndCreatePhoneNumber.
type AppControllerAddEndDateAndCreatePhoneNumberParams struct {
	Authorization string `json:"Authorization"`
}

// AppControllerAddTpdParams defines parameters for AppControllerAddTpd.
type AppControllerAddTpdParams struct {
	Authorization string `json:"Authorization"`
}

// AppControllerGetPolicyRidersParams defines parameters for AppControllerGetPolicyRiders.
type AppControllerGetPolicyRidersParams struct {
	Authorization string `json:"Authorization"`
}

// AppControllerGetPolicySystematicProgramsParams defines parameters for AppControllerGetPolicySystematicPrograms.
type AppControllerGetPolicySystematicProgramsParams struct {
	Authorization string `json:"Authorization"`
}

// AppControllerGetPolicyTransactionDeltasParams defines parameters for AppControllerGetPolicyTransactionDeltas.
type AppControllerGetPolicyTransactionDeltasParams struct {
	Authorization string `json:"Authorization"`
}

// AppControllerGetPolicyTransactionsParams defines parameters for AppControllerGetPolicyTransactions.
type AppControllerGetPolicyTransactionsParams struct {
	Authorization string `json:"Authorization"`
}

// AppControllerGetPolicyVersionsParams defines parameters for AppControllerGetPolicyVersions.
type AppControllerGetPolicyVersionsParams struct {
	Authorization string `json:"Authorization"`
}

// AppControllerGetPolicyVersionParams defines parameters for AppControllerGetPolicyVersion.
type AppControllerGetPolicyVersionParams struct {
	Authorization string `json:"Authorization"`
}

// AppControllerCreatePolicyQuoteJSONRequestBody defines body for AppControllerCreatePolicyQuote for application/json ContentType.
type AppControllerCreatePolicyQuoteJSONRequestBody = Quote

// PolicySearchControllerSearchPoliciesJSONRequestBody defines body for PolicySearchControllerSearchPolicies for application/json ContentType.
type PolicySearchControllerSearchPoliciesJSONRequestBody = SearchPolicyRequest

// AppControllerGetPolicyMetricsJSONRequestBody defines body for AppControllerGetPolicyMetrics for application/json ContentType.
type AppControllerGetPolicyMetricsJSONRequestBody = MetricsRequest

// AppControllerUpdateBeneficiaryJSONRequestBody defines body for AppControllerUpdateBeneficiary for application/json ContentType.
type AppControllerUpdateBeneficiaryJSONRequestBody = UpdateBeneficiaryRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// AppControllerGetPolicyAccountInfo request
	AppControllerGetPolicyAccountInfo(ctx context.Context, params *AppControllerGetPolicyAccountInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerGetPolicyCashValues request
	AppControllerGetPolicyCashValues(ctx context.Context, params *AppControllerGetPolicyCashValuesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerGetPolicyFundValues request
	AppControllerGetPolicyFundValues(ctx context.Context, params *AppControllerGetPolicyFundValuesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerGetPolicyLinkBanking request
	AppControllerGetPolicyLinkBanking(ctx context.Context, params *AppControllerGetPolicyLinkBankingParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerGetPolicyNotesInfo request
	AppControllerGetPolicyNotesInfo(ctx context.Context, params *AppControllerGetPolicyNotesInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerGetPolicyPeople request
	AppControllerGetPolicyPeople(ctx context.Context, params *AppControllerGetPolicyPeopleParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerCreatePolicyQuoteWithBody request with any body
	AppControllerCreatePolicyQuoteWithBody(ctx context.Context, params *AppControllerCreatePolicyQuoteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppControllerCreatePolicyQuote(ctx context.Context, params *AppControllerCreatePolicyQuoteParams, body AppControllerCreatePolicyQuoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// PolicySearchControllerSearchPoliciesWithBody request with any body
	PolicySearchControllerSearchPoliciesWithBody(ctx context.Context, params *PolicySearchControllerSearchPoliciesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	PolicySearchControllerSearchPolicies(ctx context.Context, params *PolicySearchControllerSearchPoliciesParams, body PolicySearchControllerSearchPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerGetTransactionHistory request
	AppControllerGetTransactionHistory(ctx context.Context, params *AppControllerGetTransactionHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerGetPolicy request
	AppControllerGetPolicy(ctx context.Context, policyNumber string, params *AppControllerGetPolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerGetPolicyCoverage request
	AppControllerGetPolicyCoverage(ctx context.Context, policyNumber string, params *AppControllerGetPolicyCoverageParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerGetPolicyDistribution request
	AppControllerGetPolicyDistribution(ctx context.Context, policyNumber string, params *AppControllerGetPolicyDistributionParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerGetPolicyFeatures request
	AppControllerGetPolicyFeatures(ctx context.Context, policyNumber string, params *AppControllerGetPolicyFeaturesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerGetPolicyMetricsWithBody request with any body
	AppControllerGetPolicyMetricsWithBody(ctx context.Context, policyNumber string, params *AppControllerGetPolicyMetricsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppControllerGetPolicyMetrics(ctx context.Context, policyNumber string, params *AppControllerGetPolicyMetricsParams, body AppControllerGetPolicyMetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerGetPolicyParties request
	AppControllerGetPolicyParties(ctx context.Context, policyNumber string, params *AppControllerGetPolicyPartiesParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerCreateAddress request
	AppControllerCreateAddress(ctx context.Context, policyNumber string, partyId string, params *AppControllerCreateAddressParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerAddEndDateToAddress request
	AppControllerAddEndDateToAddress(ctx context.Context, policyNumber string, partyId string, addressId string, params *AppControllerAddEndDateToAddressParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerAddEndDateAndCreateAddress request
	AppControllerAddEndDateAndCreateAddress(ctx context.Context, policyNumber string, partyId string, addressId string, params *AppControllerAddEndDateAndCreateAddressParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerDeleteBeneficiary request
	AppControllerDeleteBeneficiary(ctx context.Context, policyNumber string, partyId string, params *AppControllerDeleteBeneficiaryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerAddBeneficiary request
	AppControllerAddBeneficiary(ctx context.Context, policyNumber string, partyId string, params *AppControllerAddBeneficiaryParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerUpdateBeneficiaryWithBody request with any body
	AppControllerUpdateBeneficiaryWithBody(ctx context.Context, policyNumber string, partyId string, params *AppControllerUpdateBeneficiaryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	AppControllerUpdateBeneficiary(ctx context.Context, policyNumber string, partyId string, params *AppControllerUpdateBeneficiaryParams, body AppControllerUpdateBeneficiaryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerUpdateCommunicationPreference request
	AppControllerUpdateCommunicationPreference(ctx context.Context, policyNumber string, partyId string, params *AppControllerUpdateCommunicationPreferenceParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerCreateEmailAddress request
	AppControllerCreateEmailAddress(ctx context.Context, policyNumber string, partyId string, params *AppControllerCreateEmailAddressParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerAddEndDateToEmailAddress request
	AppControllerAddEndDateToEmailAddress(ctx context.Context, policyNumber string, partyId string, emailId string, params *AppControllerAddEndDateToEmailAddressParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerAddEndDateAndCreateEmailAddress request
	AppControllerAddEndDateAndCreateEmailAddress(ctx context.Context, policyNumber string, partyId string, emailId string, params *AppControllerAddEndDateAndCreateEmailAddressParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerAddOwner request
	AppControllerAddOwner(ctx context.Context, policyNumber string, partyId string, params *AppControllerAddOwnerParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerUpdatePartyName request
	AppControllerUpdatePartyName(ctx context.Context, policyNumber string, partyId string, params *AppControllerUpdatePartyNameParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerAddPayee request
	AppControllerAddPayee(ctx context.Context, policyNumber string, partyId string, params *AppControllerAddPayeeParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerAddPayor request
	AppControllerAddPayor(ctx context.Context, policyNumber string, partyId string, params *AppControllerAddPayorParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerUpdatePhoneNumber request
	AppControllerUpdatePhoneNumber(ctx context.Context, policyNumber string, partyId string, params *AppControllerUpdatePhoneNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerAddEndDateToPhoneNumber request
	AppControllerAddEndDateToPhoneNumber(ctx context.Context, policyNumber string, partyId string, phoneId string, params *AppControllerAddEndDateToPhoneNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerAddEndDateAndCreatePhoneNumber request
	AppControllerAddEndDateAndCreatePhoneNumber(ctx context.Context, policyNumber string, partyId string, phoneId string, params *AppControllerAddEndDateAndCreatePhoneNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerAddTpd request
	AppControllerAddTpd(ctx context.Context, policyNumber string, partyId string, params *AppControllerAddTpdParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerGetPolicyRiders request
	AppControllerGetPolicyRiders(ctx context.Context, policyNumber string, params *AppControllerGetPolicyRidersParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerGetPolicySystematicPrograms request
	AppControllerGetPolicySystematicPrograms(ctx context.Context, policyNumber string, params *AppControllerGetPolicySystematicProgramsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerGetPolicyTransactionDeltas request
	AppControllerGetPolicyTransactionDeltas(ctx context.Context, policyNumber string, params *AppControllerGetPolicyTransactionDeltasParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerGetPolicyTransactions request
	AppControllerGetPolicyTransactions(ctx context.Context, policyNumber string, params *AppControllerGetPolicyTransactionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerGetPolicyVersions request
	AppControllerGetPolicyVersions(ctx context.Context, policyNumber string, params *AppControllerGetPolicyVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// AppControllerGetPolicyVersion request
	AppControllerGetPolicyVersion(ctx context.Context, policyNumber string, version string, params *AppControllerGetPolicyVersionParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) AppControllerGetPolicyAccountInfo(ctx context.Context, params *AppControllerGetPolicyAccountInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerGetPolicyAccountInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerGetPolicyCashValues(ctx context.Context, params *AppControllerGetPolicyCashValuesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerGetPolicyCashValuesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerGetPolicyFundValues(ctx context.Context, params *AppControllerGetPolicyFundValuesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerGetPolicyFundValuesRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerGetPolicyLinkBanking(ctx context.Context, params *AppControllerGetPolicyLinkBankingParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerGetPolicyLinkBankingRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerGetPolicyNotesInfo(ctx context.Context, params *AppControllerGetPolicyNotesInfoParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerGetPolicyNotesInfoRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerGetPolicyPeople(ctx context.Context, params *AppControllerGetPolicyPeopleParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerGetPolicyPeopleRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerCreatePolicyQuoteWithBody(ctx context.Context, params *AppControllerCreatePolicyQuoteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerCreatePolicyQuoteRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerCreatePolicyQuote(ctx context.Context, params *AppControllerCreatePolicyQuoteParams, body AppControllerCreatePolicyQuoteJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerCreatePolicyQuoteRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PolicySearchControllerSearchPoliciesWithBody(ctx context.Context, params *PolicySearchControllerSearchPoliciesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPolicySearchControllerSearchPoliciesRequestWithBody(c.Server, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) PolicySearchControllerSearchPolicies(ctx context.Context, params *PolicySearchControllerSearchPoliciesParams, body PolicySearchControllerSearchPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewPolicySearchControllerSearchPoliciesRequest(c.Server, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerGetTransactionHistory(ctx context.Context, params *AppControllerGetTransactionHistoryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerGetTransactionHistoryRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerGetPolicy(ctx context.Context, policyNumber string, params *AppControllerGetPolicyParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerGetPolicyRequest(c.Server, policyNumber, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerGetPolicyCoverage(ctx context.Context, policyNumber string, params *AppControllerGetPolicyCoverageParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerGetPolicyCoverageRequest(c.Server, policyNumber, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerGetPolicyDistribution(ctx context.Context, policyNumber string, params *AppControllerGetPolicyDistributionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerGetPolicyDistributionRequest(c.Server, policyNumber, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerGetPolicyFeatures(ctx context.Context, policyNumber string, params *AppControllerGetPolicyFeaturesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerGetPolicyFeaturesRequest(c.Server, policyNumber, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerGetPolicyMetricsWithBody(ctx context.Context, policyNumber string, params *AppControllerGetPolicyMetricsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerGetPolicyMetricsRequestWithBody(c.Server, policyNumber, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerGetPolicyMetrics(ctx context.Context, policyNumber string, params *AppControllerGetPolicyMetricsParams, body AppControllerGetPolicyMetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerGetPolicyMetricsRequest(c.Server, policyNumber, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerGetPolicyParties(ctx context.Context, policyNumber string, params *AppControllerGetPolicyPartiesParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerGetPolicyPartiesRequest(c.Server, policyNumber, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerCreateAddress(ctx context.Context, policyNumber string, partyId string, params *AppControllerCreateAddressParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerCreateAddressRequest(c.Server, policyNumber, partyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerAddEndDateToAddress(ctx context.Context, policyNumber string, partyId string, addressId string, params *AppControllerAddEndDateToAddressParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerAddEndDateToAddressRequest(c.Server, policyNumber, partyId, addressId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerAddEndDateAndCreateAddress(ctx context.Context, policyNumber string, partyId string, addressId string, params *AppControllerAddEndDateAndCreateAddressParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerAddEndDateAndCreateAddressRequest(c.Server, policyNumber, partyId, addressId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerDeleteBeneficiary(ctx context.Context, policyNumber string, partyId string, params *AppControllerDeleteBeneficiaryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerDeleteBeneficiaryRequest(c.Server, policyNumber, partyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerAddBeneficiary(ctx context.Context, policyNumber string, partyId string, params *AppControllerAddBeneficiaryParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerAddBeneficiaryRequest(c.Server, policyNumber, partyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerUpdateBeneficiaryWithBody(ctx context.Context, policyNumber string, partyId string, params *AppControllerUpdateBeneficiaryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerUpdateBeneficiaryRequestWithBody(c.Server, policyNumber, partyId, params, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerUpdateBeneficiary(ctx context.Context, policyNumber string, partyId string, params *AppControllerUpdateBeneficiaryParams, body AppControllerUpdateBeneficiaryJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerUpdateBeneficiaryRequest(c.Server, policyNumber, partyId, params, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerUpdateCommunicationPreference(ctx context.Context, policyNumber string, partyId string, params *AppControllerUpdateCommunicationPreferenceParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerUpdateCommunicationPreferenceRequest(c.Server, policyNumber, partyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerCreateEmailAddress(ctx context.Context, policyNumber string, partyId string, params *AppControllerCreateEmailAddressParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerCreateEmailAddressRequest(c.Server, policyNumber, partyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerAddEndDateToEmailAddress(ctx context.Context, policyNumber string, partyId string, emailId string, params *AppControllerAddEndDateToEmailAddressParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerAddEndDateToEmailAddressRequest(c.Server, policyNumber, partyId, emailId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerAddEndDateAndCreateEmailAddress(ctx context.Context, policyNumber string, partyId string, emailId string, params *AppControllerAddEndDateAndCreateEmailAddressParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerAddEndDateAndCreateEmailAddressRequest(c.Server, policyNumber, partyId, emailId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerAddOwner(ctx context.Context, policyNumber string, partyId string, params *AppControllerAddOwnerParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerAddOwnerRequest(c.Server, policyNumber, partyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerUpdatePartyName(ctx context.Context, policyNumber string, partyId string, params *AppControllerUpdatePartyNameParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerUpdatePartyNameRequest(c.Server, policyNumber, partyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerAddPayee(ctx context.Context, policyNumber string, partyId string, params *AppControllerAddPayeeParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerAddPayeeRequest(c.Server, policyNumber, partyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerAddPayor(ctx context.Context, policyNumber string, partyId string, params *AppControllerAddPayorParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerAddPayorRequest(c.Server, policyNumber, partyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerUpdatePhoneNumber(ctx context.Context, policyNumber string, partyId string, params *AppControllerUpdatePhoneNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerUpdatePhoneNumberRequest(c.Server, policyNumber, partyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerAddEndDateToPhoneNumber(ctx context.Context, policyNumber string, partyId string, phoneId string, params *AppControllerAddEndDateToPhoneNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerAddEndDateToPhoneNumberRequest(c.Server, policyNumber, partyId, phoneId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerAddEndDateAndCreatePhoneNumber(ctx context.Context, policyNumber string, partyId string, phoneId string, params *AppControllerAddEndDateAndCreatePhoneNumberParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerAddEndDateAndCreatePhoneNumberRequest(c.Server, policyNumber, partyId, phoneId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerAddTpd(ctx context.Context, policyNumber string, partyId string, params *AppControllerAddTpdParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerAddTpdRequest(c.Server, policyNumber, partyId, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerGetPolicyRiders(ctx context.Context, policyNumber string, params *AppControllerGetPolicyRidersParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerGetPolicyRidersRequest(c.Server, policyNumber, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerGetPolicySystematicPrograms(ctx context.Context, policyNumber string, params *AppControllerGetPolicySystematicProgramsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerGetPolicySystematicProgramsRequest(c.Server, policyNumber, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerGetPolicyTransactionDeltas(ctx context.Context, policyNumber string, params *AppControllerGetPolicyTransactionDeltasParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerGetPolicyTransactionDeltasRequest(c.Server, policyNumber, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerGetPolicyTransactions(ctx context.Context, policyNumber string, params *AppControllerGetPolicyTransactionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerGetPolicyTransactionsRequest(c.Server, policyNumber, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerGetPolicyVersions(ctx context.Context, policyNumber string, params *AppControllerGetPolicyVersionsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerGetPolicyVersionsRequest(c.Server, policyNumber, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) AppControllerGetPolicyVersion(ctx context.Context, policyNumber string, version string, params *AppControllerGetPolicyVersionParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewAppControllerGetPolicyVersionRequest(c.Server, policyNumber, version, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewAppControllerGetPolicyAccountInfoRequest generates requests for AppControllerGetPolicyAccountInfo
func NewAppControllerGetPolicyAccountInfoRequest(server string, params *AppControllerGetPolicyAccountInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/accountInfo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "policyNumber", runtime.ParamLocationQuery, params.PolicyNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clientCode", runtime.ParamLocationQuery, params.ClientCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PlanNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "planNumber", runtime.ParamLocationQuery, *params.PlanNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SourceSystem != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sourceSystem", runtime.ParamLocationQuery, *params.SourceSystem); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerGetPolicyCashValuesRequest generates requests for AppControllerGetPolicyCashValues
func NewAppControllerGetPolicyCashValuesRequest(server string, params *AppControllerGetPolicyCashValuesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/cashvalues")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "policyNumber", runtime.ParamLocationQuery, params.PolicyNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clientCode", runtime.ParamLocationQuery, params.ClientCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PlanNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "planNumber", runtime.ParamLocationQuery, *params.PlanNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AsOfDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "asOfDate", runtime.ParamLocationQuery, *params.AsOfDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SourceSystem != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sourceSystem", runtime.ParamLocationQuery, *params.SourceSystem); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerGetPolicyFundValuesRequest generates requests for AppControllerGetPolicyFundValues
func NewAppControllerGetPolicyFundValuesRequest(server string, params *AppControllerGetPolicyFundValuesParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/fundvalues")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "policyNumber", runtime.ParamLocationQuery, params.PolicyNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clientCode", runtime.ParamLocationQuery, params.ClientCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PlanNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "planNumber", runtime.ParamLocationQuery, *params.PlanNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.AsOfDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "asOfDate", runtime.ParamLocationQuery, *params.AsOfDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SourceSystem != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sourceSystem", runtime.ParamLocationQuery, *params.SourceSystem); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerGetPolicyLinkBankingRequest generates requests for AppControllerGetPolicyLinkBanking
func NewAppControllerGetPolicyLinkBankingRequest(server string, params *AppControllerGetPolicyLinkBankingParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/linkbanking")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "policyNumber", runtime.ParamLocationQuery, params.PolicyNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clientCode", runtime.ParamLocationQuery, params.ClientCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "partyId", runtime.ParamLocationQuery, params.PartyId); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.EffectiveDate != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "effectiveDate", runtime.ParamLocationQuery, *params.EffectiveDate); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SourceSystem != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sourceSystem", runtime.ParamLocationQuery, *params.SourceSystem); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerGetPolicyNotesInfoRequest generates requests for AppControllerGetPolicyNotesInfo
func NewAppControllerGetPolicyNotesInfoRequest(server string, params *AppControllerGetPolicyNotesInfoParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/notesinfo")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "policyNumber", runtime.ParamLocationQuery, params.PolicyNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clientCode", runtime.ParamLocationQuery, params.ClientCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SourceSystem != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sourceSystem", runtime.ParamLocationQuery, *params.SourceSystem); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderBy != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderBy", runtime.ParamLocationQuery, *params.OrderBy); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.OrderByDirection != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "orderByDirection", runtime.ParamLocationQuery, *params.OrderByDirection); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerGetPolicyPeopleRequest generates requests for AppControllerGetPolicyPeople
func NewAppControllerGetPolicyPeopleRequest(server string, params *AppControllerGetPolicyPeopleParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/party")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "policyNumber", runtime.ParamLocationQuery, params.PolicyNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clientCode", runtime.ParamLocationQuery, params.ClientCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.PlanNumber != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "planNumber", runtime.ParamLocationQuery, *params.PlanNumber); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.SourceSystem != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sourceSystem", runtime.ParamLocationQuery, *params.SourceSystem); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.IncludeAllAddresses != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "includeAllAddresses", runtime.ParamLocationQuery, *params.IncludeAllAddresses); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerCreatePolicyQuoteRequest calls the generic AppControllerCreatePolicyQuote builder with application/json body
func NewAppControllerCreatePolicyQuoteRequest(server string, params *AppControllerCreatePolicyQuoteParams, body AppControllerCreatePolicyQuoteJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppControllerCreatePolicyQuoteRequestWithBody(server, params, "application/json", bodyReader)
}

// NewAppControllerCreatePolicyQuoteRequestWithBody generates requests for AppControllerCreatePolicyQuote with any type of body
func NewAppControllerCreatePolicyQuoteRequestWithBody(server string, params *AppControllerCreatePolicyQuoteParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/quote")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clientCode", runtime.ParamLocationQuery, params.ClientCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewPolicySearchControllerSearchPoliciesRequest calls the generic PolicySearchControllerSearchPolicies builder with application/json body
func NewPolicySearchControllerSearchPoliciesRequest(server string, params *PolicySearchControllerSearchPoliciesParams, body PolicySearchControllerSearchPoliciesJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewPolicySearchControllerSearchPoliciesRequestWithBody(server, params, "application/json", bodyReader)
}

// NewPolicySearchControllerSearchPoliciesRequestWithBody generates requests for PolicySearchControllerSearchPolicies with any type of body
func NewPolicySearchControllerSearchPoliciesRequestWithBody(server string, params *PolicySearchControllerSearchPoliciesParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/search")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, params.Offset); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, params.Limit); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerGetTransactionHistoryRequest generates requests for AppControllerGetTransactionHistory
func NewAppControllerGetTransactionHistoryRequest(server string, params *AppControllerGetTransactionHistoryParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/transactionHistory")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "policyNumber", runtime.ParamLocationQuery, params.PolicyNumber); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if queryFrag, err := runtime.StyleParamWithLocation("form", true, "clientCode", runtime.ParamLocationQuery, params.ClientCode); err != nil {
			return nil, err
		} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
			return nil, err
		} else {
			for k, v := range parsed {
				for _, v2 := range v {
					queryValues.Add(k, v2)
				}
			}
		}

		if params.SourceSystem != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "sourceSystem", runtime.ParamLocationQuery, *params.SourceSystem); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Offset != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "offset", runtime.ParamLocationQuery, *params.Offset); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TransactionType != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transactionType", runtime.ParamLocationQuery, *params.TransactionType); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TransactionStatus != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "transactionStatus", runtime.ParamLocationQuery, *params.TransactionStatus); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.TypeDesc != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "typeDesc", runtime.ParamLocationQuery, *params.TypeDesc); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerGetPolicyRequest generates requests for AppControllerGetPolicy
func NewAppControllerGetPolicyRequest(server string, policyNumber string, params *AppControllerGetPolicyParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, policyNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerGetPolicyCoverageRequest generates requests for AppControllerGetPolicyCoverage
func NewAppControllerGetPolicyCoverageRequest(server string, policyNumber string, params *AppControllerGetPolicyCoverageParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, policyNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/%s/coverage", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerGetPolicyDistributionRequest generates requests for AppControllerGetPolicyDistribution
func NewAppControllerGetPolicyDistributionRequest(server string, policyNumber string, params *AppControllerGetPolicyDistributionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, policyNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/%s/distribution", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerGetPolicyFeaturesRequest generates requests for AppControllerGetPolicyFeatures
func NewAppControllerGetPolicyFeaturesRequest(server string, policyNumber string, params *AppControllerGetPolicyFeaturesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, policyNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/%s/features", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerGetPolicyMetricsRequest calls the generic AppControllerGetPolicyMetrics builder with application/json body
func NewAppControllerGetPolicyMetricsRequest(server string, policyNumber string, params *AppControllerGetPolicyMetricsParams, body AppControllerGetPolicyMetricsJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppControllerGetPolicyMetricsRequestWithBody(server, policyNumber, params, "application/json", bodyReader)
}

// NewAppControllerGetPolicyMetricsRequestWithBody generates requests for AppControllerGetPolicyMetrics with any type of body
func NewAppControllerGetPolicyMetricsRequestWithBody(server string, policyNumber string, params *AppControllerGetPolicyMetricsParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, policyNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/%s/metrics", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerGetPolicyPartiesRequest generates requests for AppControllerGetPolicyParties
func NewAppControllerGetPolicyPartiesRequest(server string, policyNumber string, params *AppControllerGetPolicyPartiesParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, policyNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/%s/parties", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerCreateAddressRequest generates requests for AppControllerCreateAddress
func NewAppControllerCreateAddressRequest(server string, policyNumber string, partyId string, params *AppControllerCreateAddressParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, policyNumber)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "partyId", runtime.ParamLocationPath, partyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/%s/parties/%s/address", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerAddEndDateToAddressRequest generates requests for AppControllerAddEndDateToAddress
func NewAppControllerAddEndDateToAddressRequest(server string, policyNumber string, partyId string, addressId string, params *AppControllerAddEndDateToAddressParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, policyNumber)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "partyId", runtime.ParamLocationPath, partyId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "addressId", runtime.ParamLocationPath, addressId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/%s/parties/%s/address/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerAddEndDateAndCreateAddressRequest generates requests for AppControllerAddEndDateAndCreateAddress
func NewAppControllerAddEndDateAndCreateAddressRequest(server string, policyNumber string, partyId string, addressId string, params *AppControllerAddEndDateAndCreateAddressParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, policyNumber)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "partyId", runtime.ParamLocationPath, partyId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "addressId", runtime.ParamLocationPath, addressId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/%s/parties/%s/address/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerDeleteBeneficiaryRequest generates requests for AppControllerDeleteBeneficiary
func NewAppControllerDeleteBeneficiaryRequest(server string, policyNumber string, partyId string, params *AppControllerDeleteBeneficiaryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, policyNumber)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "partyId", runtime.ParamLocationPath, partyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/%s/parties/%s/beneficiary", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerAddBeneficiaryRequest generates requests for AppControllerAddBeneficiary
func NewAppControllerAddBeneficiaryRequest(server string, policyNumber string, partyId string, params *AppControllerAddBeneficiaryParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, policyNumber)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "partyId", runtime.ParamLocationPath, partyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/%s/parties/%s/beneficiary", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerUpdateBeneficiaryRequest calls the generic AppControllerUpdateBeneficiary builder with application/json body
func NewAppControllerUpdateBeneficiaryRequest(server string, policyNumber string, partyId string, params *AppControllerUpdateBeneficiaryParams, body AppControllerUpdateBeneficiaryJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewAppControllerUpdateBeneficiaryRequestWithBody(server, policyNumber, partyId, params, "application/json", bodyReader)
}

// NewAppControllerUpdateBeneficiaryRequestWithBody generates requests for AppControllerUpdateBeneficiary with any type of body
func NewAppControllerUpdateBeneficiaryRequestWithBody(server string, policyNumber string, partyId string, params *AppControllerUpdateBeneficiaryParams, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, policyNumber)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "partyId", runtime.ParamLocationPath, partyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/%s/parties/%s/beneficiary", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerUpdateCommunicationPreferenceRequest generates requests for AppControllerUpdateCommunicationPreference
func NewAppControllerUpdateCommunicationPreferenceRequest(server string, policyNumber string, partyId string, params *AppControllerUpdateCommunicationPreferenceParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, policyNumber)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "partyId", runtime.ParamLocationPath, partyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/%s/parties/%s/communicationpreference", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerCreateEmailAddressRequest generates requests for AppControllerCreateEmailAddress
func NewAppControllerCreateEmailAddressRequest(server string, policyNumber string, partyId string, params *AppControllerCreateEmailAddressParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, policyNumber)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "partyId", runtime.ParamLocationPath, partyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/%s/parties/%s/emailaddress", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerAddEndDateToEmailAddressRequest generates requests for AppControllerAddEndDateToEmailAddress
func NewAppControllerAddEndDateToEmailAddressRequest(server string, policyNumber string, partyId string, emailId string, params *AppControllerAddEndDateToEmailAddressParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, policyNumber)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "partyId", runtime.ParamLocationPath, partyId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "emailId", runtime.ParamLocationPath, emailId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/%s/parties/%s/emailaddress/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerAddEndDateAndCreateEmailAddressRequest generates requests for AppControllerAddEndDateAndCreateEmailAddress
func NewAppControllerAddEndDateAndCreateEmailAddressRequest(server string, policyNumber string, partyId string, emailId string, params *AppControllerAddEndDateAndCreateEmailAddressParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, policyNumber)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "partyId", runtime.ParamLocationPath, partyId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "emailId", runtime.ParamLocationPath, emailId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/%s/parties/%s/emailaddress/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerAddOwnerRequest generates requests for AppControllerAddOwner
func NewAppControllerAddOwnerRequest(server string, policyNumber string, partyId string, params *AppControllerAddOwnerParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, policyNumber)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "partyId", runtime.ParamLocationPath, partyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/%s/parties/%s/owner", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerUpdatePartyNameRequest generates requests for AppControllerUpdatePartyName
func NewAppControllerUpdatePartyNameRequest(server string, policyNumber string, partyId string, params *AppControllerUpdatePartyNameParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, policyNumber)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "partyId", runtime.ParamLocationPath, partyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/%s/parties/%s/partyname", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerAddPayeeRequest generates requests for AppControllerAddPayee
func NewAppControllerAddPayeeRequest(server string, policyNumber string, partyId string, params *AppControllerAddPayeeParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, policyNumber)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "partyId", runtime.ParamLocationPath, partyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/%s/parties/%s/payee", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerAddPayorRequest generates requests for AppControllerAddPayor
func NewAppControllerAddPayorRequest(server string, policyNumber string, partyId string, params *AppControllerAddPayorParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, policyNumber)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "partyId", runtime.ParamLocationPath, partyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/%s/parties/%s/payor", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerUpdatePhoneNumberRequest generates requests for AppControllerUpdatePhoneNumber
func NewAppControllerUpdatePhoneNumberRequest(server string, policyNumber string, partyId string, params *AppControllerUpdatePhoneNumberParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, policyNumber)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "partyId", runtime.ParamLocationPath, partyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/%s/parties/%s/phone", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerAddEndDateToPhoneNumberRequest generates requests for AppControllerAddEndDateToPhoneNumber
func NewAppControllerAddEndDateToPhoneNumberRequest(server string, policyNumber string, partyId string, phoneId string, params *AppControllerAddEndDateToPhoneNumberParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, policyNumber)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "partyId", runtime.ParamLocationPath, partyId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "phoneId", runtime.ParamLocationPath, phoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/%s/parties/%s/phone/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerAddEndDateAndCreatePhoneNumberRequest generates requests for AppControllerAddEndDateAndCreatePhoneNumber
func NewAppControllerAddEndDateAndCreatePhoneNumberRequest(server string, policyNumber string, partyId string, phoneId string, params *AppControllerAddEndDateAndCreatePhoneNumberParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, policyNumber)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "partyId", runtime.ParamLocationPath, partyId)
	if err != nil {
		return nil, err
	}

	var pathParam2 string

	pathParam2, err = runtime.StyleParamWithLocation("simple", false, "phoneId", runtime.ParamLocationPath, phoneId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/%s/parties/%s/phone/%s", pathParam0, pathParam1, pathParam2)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerAddTpdRequest generates requests for AppControllerAddTpd
func NewAppControllerAddTpdRequest(server string, policyNumber string, partyId string, params *AppControllerAddTpdParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, policyNumber)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "partyId", runtime.ParamLocationPath, partyId)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/%s/parties/%s/tpd", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerGetPolicyRidersRequest generates requests for AppControllerGetPolicyRiders
func NewAppControllerGetPolicyRidersRequest(server string, policyNumber string, params *AppControllerGetPolicyRidersParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, policyNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/%s/riders", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerGetPolicySystematicProgramsRequest generates requests for AppControllerGetPolicySystematicPrograms
func NewAppControllerGetPolicySystematicProgramsRequest(server string, policyNumber string, params *AppControllerGetPolicySystematicProgramsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, policyNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/%s/systematicPrograms", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerGetPolicyTransactionDeltasRequest generates requests for AppControllerGetPolicyTransactionDeltas
func NewAppControllerGetPolicyTransactionDeltasRequest(server string, policyNumber string, params *AppControllerGetPolicyTransactionDeltasParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, policyNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/%s/transactionDeltas", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerGetPolicyTransactionsRequest generates requests for AppControllerGetPolicyTransactions
func NewAppControllerGetPolicyTransactionsRequest(server string, policyNumber string, params *AppControllerGetPolicyTransactionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, policyNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/%s/transactions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerGetPolicyVersionsRequest generates requests for AppControllerGetPolicyVersions
func NewAppControllerGetPolicyVersionsRequest(server string, policyNumber string, params *AppControllerGetPolicyVersionsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, policyNumber)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/%s/versions", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

// NewAppControllerGetPolicyVersionRequest generates requests for AppControllerGetPolicyVersion
func NewAppControllerGetPolicyVersionRequest(server string, policyNumber string, version string, params *AppControllerGetPolicyVersionParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, policyNumber)
	if err != nil {
		return nil, err
	}

	var pathParam1 string

	pathParam1, err = runtime.StyleParamWithLocation("simple", false, "version", runtime.ParamLocationPath, version)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/policy/v1/policies/%s/versions/%s", pathParam0, pathParam1)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	if params != nil {

		var headerParam0 string

		headerParam0, err = runtime.StyleParamWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, params.Authorization)
		if err != nil {
			return nil, err
		}

		req.Header.Set("Authorization", headerParam0)

	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// AppControllerGetPolicyAccountInfoWithResponse request
	AppControllerGetPolicyAccountInfoWithResponse(ctx context.Context, params *AppControllerGetPolicyAccountInfoParams, reqEditors ...RequestEditorFn) (*AppControllerGetPolicyAccountInfoResponse, error)

	// AppControllerGetPolicyCashValuesWithResponse request
	AppControllerGetPolicyCashValuesWithResponse(ctx context.Context, params *AppControllerGetPolicyCashValuesParams, reqEditors ...RequestEditorFn) (*AppControllerGetPolicyCashValuesResponse, error)

	// AppControllerGetPolicyFundValuesWithResponse request
	AppControllerGetPolicyFundValuesWithResponse(ctx context.Context, params *AppControllerGetPolicyFundValuesParams, reqEditors ...RequestEditorFn) (*AppControllerGetPolicyFundValuesResponse, error)

	// AppControllerGetPolicyLinkBankingWithResponse request
	AppControllerGetPolicyLinkBankingWithResponse(ctx context.Context, params *AppControllerGetPolicyLinkBankingParams, reqEditors ...RequestEditorFn) (*AppControllerGetPolicyLinkBankingResponse, error)

	// AppControllerGetPolicyNotesInfoWithResponse request
	AppControllerGetPolicyNotesInfoWithResponse(ctx context.Context, params *AppControllerGetPolicyNotesInfoParams, reqEditors ...RequestEditorFn) (*AppControllerGetPolicyNotesInfoResponse, error)

	// AppControllerGetPolicyPeopleWithResponse request
	AppControllerGetPolicyPeopleWithResponse(ctx context.Context, params *AppControllerGetPolicyPeopleParams, reqEditors ...RequestEditorFn) (*AppControllerGetPolicyPeopleResponse, error)

	// AppControllerCreatePolicyQuoteWithBodyWithResponse request with any body
	AppControllerCreatePolicyQuoteWithBodyWithResponse(ctx context.Context, params *AppControllerCreatePolicyQuoteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppControllerCreatePolicyQuoteResponse, error)

	AppControllerCreatePolicyQuoteWithResponse(ctx context.Context, params *AppControllerCreatePolicyQuoteParams, body AppControllerCreatePolicyQuoteJSONRequestBody, reqEditors ...RequestEditorFn) (*AppControllerCreatePolicyQuoteResponse, error)

	// PolicySearchControllerSearchPoliciesWithBodyWithResponse request with any body
	PolicySearchControllerSearchPoliciesWithBodyWithResponse(ctx context.Context, params *PolicySearchControllerSearchPoliciesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PolicySearchControllerSearchPoliciesResponse, error)

	PolicySearchControllerSearchPoliciesWithResponse(ctx context.Context, params *PolicySearchControllerSearchPoliciesParams, body PolicySearchControllerSearchPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*PolicySearchControllerSearchPoliciesResponse, error)

	// AppControllerGetTransactionHistoryWithResponse request
	AppControllerGetTransactionHistoryWithResponse(ctx context.Context, params *AppControllerGetTransactionHistoryParams, reqEditors ...RequestEditorFn) (*AppControllerGetTransactionHistoryResponse, error)

	// AppControllerGetPolicyWithResponse request
	AppControllerGetPolicyWithResponse(ctx context.Context, policyNumber string, params *AppControllerGetPolicyParams, reqEditors ...RequestEditorFn) (*AppControllerGetPolicyResponse, error)

	// AppControllerGetPolicyCoverageWithResponse request
	AppControllerGetPolicyCoverageWithResponse(ctx context.Context, policyNumber string, params *AppControllerGetPolicyCoverageParams, reqEditors ...RequestEditorFn) (*AppControllerGetPolicyCoverageResponse, error)

	// AppControllerGetPolicyDistributionWithResponse request
	AppControllerGetPolicyDistributionWithResponse(ctx context.Context, policyNumber string, params *AppControllerGetPolicyDistributionParams, reqEditors ...RequestEditorFn) (*AppControllerGetPolicyDistributionResponse, error)

	// AppControllerGetPolicyFeaturesWithResponse request
	AppControllerGetPolicyFeaturesWithResponse(ctx context.Context, policyNumber string, params *AppControllerGetPolicyFeaturesParams, reqEditors ...RequestEditorFn) (*AppControllerGetPolicyFeaturesResponse, error)

	// AppControllerGetPolicyMetricsWithBodyWithResponse request with any body
	AppControllerGetPolicyMetricsWithBodyWithResponse(ctx context.Context, policyNumber string, params *AppControllerGetPolicyMetricsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppControllerGetPolicyMetricsResponse, error)

	AppControllerGetPolicyMetricsWithResponse(ctx context.Context, policyNumber string, params *AppControllerGetPolicyMetricsParams, body AppControllerGetPolicyMetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*AppControllerGetPolicyMetricsResponse, error)

	// AppControllerGetPolicyPartiesWithResponse request
	AppControllerGetPolicyPartiesWithResponse(ctx context.Context, policyNumber string, params *AppControllerGetPolicyPartiesParams, reqEditors ...RequestEditorFn) (*AppControllerGetPolicyPartiesResponse, error)

	// AppControllerCreateAddressWithResponse request
	AppControllerCreateAddressWithResponse(ctx context.Context, policyNumber string, partyId string, params *AppControllerCreateAddressParams, reqEditors ...RequestEditorFn) (*AppControllerCreateAddressResponse, error)

	// AppControllerAddEndDateToAddressWithResponse request
	AppControllerAddEndDateToAddressWithResponse(ctx context.Context, policyNumber string, partyId string, addressId string, params *AppControllerAddEndDateToAddressParams, reqEditors ...RequestEditorFn) (*AppControllerAddEndDateToAddressResponse, error)

	// AppControllerAddEndDateAndCreateAddressWithResponse request
	AppControllerAddEndDateAndCreateAddressWithResponse(ctx context.Context, policyNumber string, partyId string, addressId string, params *AppControllerAddEndDateAndCreateAddressParams, reqEditors ...RequestEditorFn) (*AppControllerAddEndDateAndCreateAddressResponse, error)

	// AppControllerDeleteBeneficiaryWithResponse request
	AppControllerDeleteBeneficiaryWithResponse(ctx context.Context, policyNumber string, partyId string, params *AppControllerDeleteBeneficiaryParams, reqEditors ...RequestEditorFn) (*AppControllerDeleteBeneficiaryResponse, error)

	// AppControllerAddBeneficiaryWithResponse request
	AppControllerAddBeneficiaryWithResponse(ctx context.Context, policyNumber string, partyId string, params *AppControllerAddBeneficiaryParams, reqEditors ...RequestEditorFn) (*AppControllerAddBeneficiaryResponse, error)

	// AppControllerUpdateBeneficiaryWithBodyWithResponse request with any body
	AppControllerUpdateBeneficiaryWithBodyWithResponse(ctx context.Context, policyNumber string, partyId string, params *AppControllerUpdateBeneficiaryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppControllerUpdateBeneficiaryResponse, error)

	AppControllerUpdateBeneficiaryWithResponse(ctx context.Context, policyNumber string, partyId string, params *AppControllerUpdateBeneficiaryParams, body AppControllerUpdateBeneficiaryJSONRequestBody, reqEditors ...RequestEditorFn) (*AppControllerUpdateBeneficiaryResponse, error)

	// AppControllerUpdateCommunicationPreferenceWithResponse request
	AppControllerUpdateCommunicationPreferenceWithResponse(ctx context.Context, policyNumber string, partyId string, params *AppControllerUpdateCommunicationPreferenceParams, reqEditors ...RequestEditorFn) (*AppControllerUpdateCommunicationPreferenceResponse, error)

	// AppControllerCreateEmailAddressWithResponse request
	AppControllerCreateEmailAddressWithResponse(ctx context.Context, policyNumber string, partyId string, params *AppControllerCreateEmailAddressParams, reqEditors ...RequestEditorFn) (*AppControllerCreateEmailAddressResponse, error)

	// AppControllerAddEndDateToEmailAddressWithResponse request
	AppControllerAddEndDateToEmailAddressWithResponse(ctx context.Context, policyNumber string, partyId string, emailId string, params *AppControllerAddEndDateToEmailAddressParams, reqEditors ...RequestEditorFn) (*AppControllerAddEndDateToEmailAddressResponse, error)

	// AppControllerAddEndDateAndCreateEmailAddressWithResponse request
	AppControllerAddEndDateAndCreateEmailAddressWithResponse(ctx context.Context, policyNumber string, partyId string, emailId string, params *AppControllerAddEndDateAndCreateEmailAddressParams, reqEditors ...RequestEditorFn) (*AppControllerAddEndDateAndCreateEmailAddressResponse, error)

	// AppControllerAddOwnerWithResponse request
	AppControllerAddOwnerWithResponse(ctx context.Context, policyNumber string, partyId string, params *AppControllerAddOwnerParams, reqEditors ...RequestEditorFn) (*AppControllerAddOwnerResponse, error)

	// AppControllerUpdatePartyNameWithResponse request
	AppControllerUpdatePartyNameWithResponse(ctx context.Context, policyNumber string, partyId string, params *AppControllerUpdatePartyNameParams, reqEditors ...RequestEditorFn) (*AppControllerUpdatePartyNameResponse, error)

	// AppControllerAddPayeeWithResponse request
	AppControllerAddPayeeWithResponse(ctx context.Context, policyNumber string, partyId string, params *AppControllerAddPayeeParams, reqEditors ...RequestEditorFn) (*AppControllerAddPayeeResponse, error)

	// AppControllerAddPayorWithResponse request
	AppControllerAddPayorWithResponse(ctx context.Context, policyNumber string, partyId string, params *AppControllerAddPayorParams, reqEditors ...RequestEditorFn) (*AppControllerAddPayorResponse, error)

	// AppControllerUpdatePhoneNumberWithResponse request
	AppControllerUpdatePhoneNumberWithResponse(ctx context.Context, policyNumber string, partyId string, params *AppControllerUpdatePhoneNumberParams, reqEditors ...RequestEditorFn) (*AppControllerUpdatePhoneNumberResponse, error)

	// AppControllerAddEndDateToPhoneNumberWithResponse request
	AppControllerAddEndDateToPhoneNumberWithResponse(ctx context.Context, policyNumber string, partyId string, phoneId string, params *AppControllerAddEndDateToPhoneNumberParams, reqEditors ...RequestEditorFn) (*AppControllerAddEndDateToPhoneNumberResponse, error)

	// AppControllerAddEndDateAndCreatePhoneNumberWithResponse request
	AppControllerAddEndDateAndCreatePhoneNumberWithResponse(ctx context.Context, policyNumber string, partyId string, phoneId string, params *AppControllerAddEndDateAndCreatePhoneNumberParams, reqEditors ...RequestEditorFn) (*AppControllerAddEndDateAndCreatePhoneNumberResponse, error)

	// AppControllerAddTpdWithResponse request
	AppControllerAddTpdWithResponse(ctx context.Context, policyNumber string, partyId string, params *AppControllerAddTpdParams, reqEditors ...RequestEditorFn) (*AppControllerAddTpdResponse, error)

	// AppControllerGetPolicyRidersWithResponse request
	AppControllerGetPolicyRidersWithResponse(ctx context.Context, policyNumber string, params *AppControllerGetPolicyRidersParams, reqEditors ...RequestEditorFn) (*AppControllerGetPolicyRidersResponse, error)

	// AppControllerGetPolicySystematicProgramsWithResponse request
	AppControllerGetPolicySystematicProgramsWithResponse(ctx context.Context, policyNumber string, params *AppControllerGetPolicySystematicProgramsParams, reqEditors ...RequestEditorFn) (*AppControllerGetPolicySystematicProgramsResponse, error)

	// AppControllerGetPolicyTransactionDeltasWithResponse request
	AppControllerGetPolicyTransactionDeltasWithResponse(ctx context.Context, policyNumber string, params *AppControllerGetPolicyTransactionDeltasParams, reqEditors ...RequestEditorFn) (*AppControllerGetPolicyTransactionDeltasResponse, error)

	// AppControllerGetPolicyTransactionsWithResponse request
	AppControllerGetPolicyTransactionsWithResponse(ctx context.Context, policyNumber string, params *AppControllerGetPolicyTransactionsParams, reqEditors ...RequestEditorFn) (*AppControllerGetPolicyTransactionsResponse, error)

	// AppControllerGetPolicyVersionsWithResponse request
	AppControllerGetPolicyVersionsWithResponse(ctx context.Context, policyNumber string, params *AppControllerGetPolicyVersionsParams, reqEditors ...RequestEditorFn) (*AppControllerGetPolicyVersionsResponse, error)

	// AppControllerGetPolicyVersionWithResponse request
	AppControllerGetPolicyVersionWithResponse(ctx context.Context, policyNumber string, version string, params *AppControllerGetPolicyVersionParams, reqEditors ...RequestEditorFn) (*AppControllerGetPolicyVersionResponse, error)
}

type AppControllerGetPolicyAccountInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *AccountInfo
}

// Status returns HTTPResponse.Status
func (r AppControllerGetPolicyAccountInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerGetPolicyAccountInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerGetPolicyCashValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *CashValues
}

// Status returns HTTPResponse.Status
func (r AppControllerGetPolicyCashValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerGetPolicyCashValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerGetPolicyFundValuesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *FundValues
}

// Status returns HTTPResponse.Status
func (r AppControllerGetPolicyFundValuesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerGetPolicyFundValuesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerGetPolicyLinkBankingResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LinkBanking
}

// Status returns HTTPResponse.Status
func (r AppControllerGetPolicyLinkBankingResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerGetPolicyLinkBankingResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerGetPolicyNotesInfoResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *NotesInfo
}

// Status returns HTTPResponse.Status
func (r AppControllerGetPolicyNotesInfoResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerGetPolicyNotesInfoResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerGetPolicyPeopleResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *People
}

// Status returns HTTPResponse.Status
func (r AppControllerGetPolicyPeopleResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerGetPolicyPeopleResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerCreatePolicyQuoteResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *Quote
}

// Status returns HTTPResponse.Status
func (r AppControllerCreatePolicyQuoteResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerCreatePolicyQuoteResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type PolicySearchControllerSearchPoliciesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r PolicySearchControllerSearchPoliciesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r PolicySearchControllerSearchPoliciesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerGetTransactionHistoryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LinkBanking
}

// Status returns HTTPResponse.Status
func (r AppControllerGetTransactionHistoryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerGetTransactionHistoryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerGetPolicyResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AppControllerGetPolicyResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerGetPolicyResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerGetPolicyCoverageResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AppControllerGetPolicyCoverageResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerGetPolicyCoverageResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerGetPolicyDistributionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AppControllerGetPolicyDistributionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerGetPolicyDistributionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerGetPolicyFeaturesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AppControllerGetPolicyFeaturesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerGetPolicyFeaturesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerGetPolicyMetricsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *MetricsResponse
}

// Status returns HTTPResponse.Status
func (r AppControllerGetPolicyMetricsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerGetPolicyMetricsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerGetPolicyPartiesResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AppControllerGetPolicyPartiesResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerGetPolicyPartiesResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerCreateAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AppControllerCreateAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerCreateAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerAddEndDateToAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AppControllerAddEndDateToAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerAddEndDateToAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerAddEndDateAndCreateAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AppControllerAddEndDateAndCreateAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerAddEndDateAndCreateAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerDeleteBeneficiaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AppControllerDeleteBeneficiaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerDeleteBeneficiaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerAddBeneficiaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AppControllerAddBeneficiaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerAddBeneficiaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerUpdateBeneficiaryResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AppControllerUpdateBeneficiaryResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerUpdateBeneficiaryResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerUpdateCommunicationPreferenceResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AppControllerUpdateCommunicationPreferenceResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerUpdateCommunicationPreferenceResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerCreateEmailAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AppControllerCreateEmailAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerCreateEmailAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerAddEndDateToEmailAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AppControllerAddEndDateToEmailAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerAddEndDateToEmailAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerAddEndDateAndCreateEmailAddressResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AppControllerAddEndDateAndCreateEmailAddressResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerAddEndDateAndCreateEmailAddressResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerAddOwnerResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AppControllerAddOwnerResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerAddOwnerResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerUpdatePartyNameResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AppControllerUpdatePartyNameResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerUpdatePartyNameResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerAddPayeeResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AppControllerAddPayeeResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerAddPayeeResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerAddPayorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AppControllerAddPayorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerAddPayorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerUpdatePhoneNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AppControllerUpdatePhoneNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerUpdatePhoneNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerAddEndDateToPhoneNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AppControllerAddEndDateToPhoneNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerAddEndDateToPhoneNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerAddEndDateAndCreatePhoneNumberResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AppControllerAddEndDateAndCreatePhoneNumberResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerAddEndDateAndCreatePhoneNumberResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerAddTpdResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AppControllerAddTpdResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerAddTpdResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerGetPolicyRidersResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AppControllerGetPolicyRidersResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerGetPolicyRidersResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerGetPolicySystematicProgramsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AppControllerGetPolicySystematicProgramsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerGetPolicySystematicProgramsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerGetPolicyTransactionDeltasResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AppControllerGetPolicyTransactionDeltasResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerGetPolicyTransactionDeltasResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerGetPolicyTransactionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AppControllerGetPolicyTransactionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerGetPolicyTransactionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerGetPolicyVersionsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AppControllerGetPolicyVersionsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerGetPolicyVersionsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type AppControllerGetPolicyVersionResponse struct {
	Body         []byte
	HTTPResponse *http.Response
}

// Status returns HTTPResponse.Status
func (r AppControllerGetPolicyVersionResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r AppControllerGetPolicyVersionResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// AppControllerGetPolicyAccountInfoWithResponse request returning *AppControllerGetPolicyAccountInfoResponse
func (c *ClientWithResponses) AppControllerGetPolicyAccountInfoWithResponse(ctx context.Context, params *AppControllerGetPolicyAccountInfoParams, reqEditors ...RequestEditorFn) (*AppControllerGetPolicyAccountInfoResponse, error) {
	rsp, err := c.AppControllerGetPolicyAccountInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerGetPolicyAccountInfoResponse(rsp)
}

// AppControllerGetPolicyCashValuesWithResponse request returning *AppControllerGetPolicyCashValuesResponse
func (c *ClientWithResponses) AppControllerGetPolicyCashValuesWithResponse(ctx context.Context, params *AppControllerGetPolicyCashValuesParams, reqEditors ...RequestEditorFn) (*AppControllerGetPolicyCashValuesResponse, error) {
	rsp, err := c.AppControllerGetPolicyCashValues(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerGetPolicyCashValuesResponse(rsp)
}

// AppControllerGetPolicyFundValuesWithResponse request returning *AppControllerGetPolicyFundValuesResponse
func (c *ClientWithResponses) AppControllerGetPolicyFundValuesWithResponse(ctx context.Context, params *AppControllerGetPolicyFundValuesParams, reqEditors ...RequestEditorFn) (*AppControllerGetPolicyFundValuesResponse, error) {
	rsp, err := c.AppControllerGetPolicyFundValues(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerGetPolicyFundValuesResponse(rsp)
}

// AppControllerGetPolicyLinkBankingWithResponse request returning *AppControllerGetPolicyLinkBankingResponse
func (c *ClientWithResponses) AppControllerGetPolicyLinkBankingWithResponse(ctx context.Context, params *AppControllerGetPolicyLinkBankingParams, reqEditors ...RequestEditorFn) (*AppControllerGetPolicyLinkBankingResponse, error) {
	rsp, err := c.AppControllerGetPolicyLinkBanking(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerGetPolicyLinkBankingResponse(rsp)
}

// AppControllerGetPolicyNotesInfoWithResponse request returning *AppControllerGetPolicyNotesInfoResponse
func (c *ClientWithResponses) AppControllerGetPolicyNotesInfoWithResponse(ctx context.Context, params *AppControllerGetPolicyNotesInfoParams, reqEditors ...RequestEditorFn) (*AppControllerGetPolicyNotesInfoResponse, error) {
	rsp, err := c.AppControllerGetPolicyNotesInfo(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerGetPolicyNotesInfoResponse(rsp)
}

// AppControllerGetPolicyPeopleWithResponse request returning *AppControllerGetPolicyPeopleResponse
func (c *ClientWithResponses) AppControllerGetPolicyPeopleWithResponse(ctx context.Context, params *AppControllerGetPolicyPeopleParams, reqEditors ...RequestEditorFn) (*AppControllerGetPolicyPeopleResponse, error) {
	rsp, err := c.AppControllerGetPolicyPeople(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerGetPolicyPeopleResponse(rsp)
}

// AppControllerCreatePolicyQuoteWithBodyWithResponse request with arbitrary body returning *AppControllerCreatePolicyQuoteResponse
func (c *ClientWithResponses) AppControllerCreatePolicyQuoteWithBodyWithResponse(ctx context.Context, params *AppControllerCreatePolicyQuoteParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppControllerCreatePolicyQuoteResponse, error) {
	rsp, err := c.AppControllerCreatePolicyQuoteWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerCreatePolicyQuoteResponse(rsp)
}

func (c *ClientWithResponses) AppControllerCreatePolicyQuoteWithResponse(ctx context.Context, params *AppControllerCreatePolicyQuoteParams, body AppControllerCreatePolicyQuoteJSONRequestBody, reqEditors ...RequestEditorFn) (*AppControllerCreatePolicyQuoteResponse, error) {
	rsp, err := c.AppControllerCreatePolicyQuote(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerCreatePolicyQuoteResponse(rsp)
}

// PolicySearchControllerSearchPoliciesWithBodyWithResponse request with arbitrary body returning *PolicySearchControllerSearchPoliciesResponse
func (c *ClientWithResponses) PolicySearchControllerSearchPoliciesWithBodyWithResponse(ctx context.Context, params *PolicySearchControllerSearchPoliciesParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*PolicySearchControllerSearchPoliciesResponse, error) {
	rsp, err := c.PolicySearchControllerSearchPoliciesWithBody(ctx, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePolicySearchControllerSearchPoliciesResponse(rsp)
}

func (c *ClientWithResponses) PolicySearchControllerSearchPoliciesWithResponse(ctx context.Context, params *PolicySearchControllerSearchPoliciesParams, body PolicySearchControllerSearchPoliciesJSONRequestBody, reqEditors ...RequestEditorFn) (*PolicySearchControllerSearchPoliciesResponse, error) {
	rsp, err := c.PolicySearchControllerSearchPolicies(ctx, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParsePolicySearchControllerSearchPoliciesResponse(rsp)
}

// AppControllerGetTransactionHistoryWithResponse request returning *AppControllerGetTransactionHistoryResponse
func (c *ClientWithResponses) AppControllerGetTransactionHistoryWithResponse(ctx context.Context, params *AppControllerGetTransactionHistoryParams, reqEditors ...RequestEditorFn) (*AppControllerGetTransactionHistoryResponse, error) {
	rsp, err := c.AppControllerGetTransactionHistory(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerGetTransactionHistoryResponse(rsp)
}

// AppControllerGetPolicyWithResponse request returning *AppControllerGetPolicyResponse
func (c *ClientWithResponses) AppControllerGetPolicyWithResponse(ctx context.Context, policyNumber string, params *AppControllerGetPolicyParams, reqEditors ...RequestEditorFn) (*AppControllerGetPolicyResponse, error) {
	rsp, err := c.AppControllerGetPolicy(ctx, policyNumber, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerGetPolicyResponse(rsp)
}

// AppControllerGetPolicyCoverageWithResponse request returning *AppControllerGetPolicyCoverageResponse
func (c *ClientWithResponses) AppControllerGetPolicyCoverageWithResponse(ctx context.Context, policyNumber string, params *AppControllerGetPolicyCoverageParams, reqEditors ...RequestEditorFn) (*AppControllerGetPolicyCoverageResponse, error) {
	rsp, err := c.AppControllerGetPolicyCoverage(ctx, policyNumber, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerGetPolicyCoverageResponse(rsp)
}

// AppControllerGetPolicyDistributionWithResponse request returning *AppControllerGetPolicyDistributionResponse
func (c *ClientWithResponses) AppControllerGetPolicyDistributionWithResponse(ctx context.Context, policyNumber string, params *AppControllerGetPolicyDistributionParams, reqEditors ...RequestEditorFn) (*AppControllerGetPolicyDistributionResponse, error) {
	rsp, err := c.AppControllerGetPolicyDistribution(ctx, policyNumber, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerGetPolicyDistributionResponse(rsp)
}

// AppControllerGetPolicyFeaturesWithResponse request returning *AppControllerGetPolicyFeaturesResponse
func (c *ClientWithResponses) AppControllerGetPolicyFeaturesWithResponse(ctx context.Context, policyNumber string, params *AppControllerGetPolicyFeaturesParams, reqEditors ...RequestEditorFn) (*AppControllerGetPolicyFeaturesResponse, error) {
	rsp, err := c.AppControllerGetPolicyFeatures(ctx, policyNumber, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerGetPolicyFeaturesResponse(rsp)
}

// AppControllerGetPolicyMetricsWithBodyWithResponse request with arbitrary body returning *AppControllerGetPolicyMetricsResponse
func (c *ClientWithResponses) AppControllerGetPolicyMetricsWithBodyWithResponse(ctx context.Context, policyNumber string, params *AppControllerGetPolicyMetricsParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppControllerGetPolicyMetricsResponse, error) {
	rsp, err := c.AppControllerGetPolicyMetricsWithBody(ctx, policyNumber, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerGetPolicyMetricsResponse(rsp)
}

func (c *ClientWithResponses) AppControllerGetPolicyMetricsWithResponse(ctx context.Context, policyNumber string, params *AppControllerGetPolicyMetricsParams, body AppControllerGetPolicyMetricsJSONRequestBody, reqEditors ...RequestEditorFn) (*AppControllerGetPolicyMetricsResponse, error) {
	rsp, err := c.AppControllerGetPolicyMetrics(ctx, policyNumber, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerGetPolicyMetricsResponse(rsp)
}

// AppControllerGetPolicyPartiesWithResponse request returning *AppControllerGetPolicyPartiesResponse
func (c *ClientWithResponses) AppControllerGetPolicyPartiesWithResponse(ctx context.Context, policyNumber string, params *AppControllerGetPolicyPartiesParams, reqEditors ...RequestEditorFn) (*AppControllerGetPolicyPartiesResponse, error) {
	rsp, err := c.AppControllerGetPolicyParties(ctx, policyNumber, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerGetPolicyPartiesResponse(rsp)
}

// AppControllerCreateAddressWithResponse request returning *AppControllerCreateAddressResponse
func (c *ClientWithResponses) AppControllerCreateAddressWithResponse(ctx context.Context, policyNumber string, partyId string, params *AppControllerCreateAddressParams, reqEditors ...RequestEditorFn) (*AppControllerCreateAddressResponse, error) {
	rsp, err := c.AppControllerCreateAddress(ctx, policyNumber, partyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerCreateAddressResponse(rsp)
}

// AppControllerAddEndDateToAddressWithResponse request returning *AppControllerAddEndDateToAddressResponse
func (c *ClientWithResponses) AppControllerAddEndDateToAddressWithResponse(ctx context.Context, policyNumber string, partyId string, addressId string, params *AppControllerAddEndDateToAddressParams, reqEditors ...RequestEditorFn) (*AppControllerAddEndDateToAddressResponse, error) {
	rsp, err := c.AppControllerAddEndDateToAddress(ctx, policyNumber, partyId, addressId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerAddEndDateToAddressResponse(rsp)
}

// AppControllerAddEndDateAndCreateAddressWithResponse request returning *AppControllerAddEndDateAndCreateAddressResponse
func (c *ClientWithResponses) AppControllerAddEndDateAndCreateAddressWithResponse(ctx context.Context, policyNumber string, partyId string, addressId string, params *AppControllerAddEndDateAndCreateAddressParams, reqEditors ...RequestEditorFn) (*AppControllerAddEndDateAndCreateAddressResponse, error) {
	rsp, err := c.AppControllerAddEndDateAndCreateAddress(ctx, policyNumber, partyId, addressId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerAddEndDateAndCreateAddressResponse(rsp)
}

// AppControllerDeleteBeneficiaryWithResponse request returning *AppControllerDeleteBeneficiaryResponse
func (c *ClientWithResponses) AppControllerDeleteBeneficiaryWithResponse(ctx context.Context, policyNumber string, partyId string, params *AppControllerDeleteBeneficiaryParams, reqEditors ...RequestEditorFn) (*AppControllerDeleteBeneficiaryResponse, error) {
	rsp, err := c.AppControllerDeleteBeneficiary(ctx, policyNumber, partyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerDeleteBeneficiaryResponse(rsp)
}

// AppControllerAddBeneficiaryWithResponse request returning *AppControllerAddBeneficiaryResponse
func (c *ClientWithResponses) AppControllerAddBeneficiaryWithResponse(ctx context.Context, policyNumber string, partyId string, params *AppControllerAddBeneficiaryParams, reqEditors ...RequestEditorFn) (*AppControllerAddBeneficiaryResponse, error) {
	rsp, err := c.AppControllerAddBeneficiary(ctx, policyNumber, partyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerAddBeneficiaryResponse(rsp)
}

// AppControllerUpdateBeneficiaryWithBodyWithResponse request with arbitrary body returning *AppControllerUpdateBeneficiaryResponse
func (c *ClientWithResponses) AppControllerUpdateBeneficiaryWithBodyWithResponse(ctx context.Context, policyNumber string, partyId string, params *AppControllerUpdateBeneficiaryParams, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*AppControllerUpdateBeneficiaryResponse, error) {
	rsp, err := c.AppControllerUpdateBeneficiaryWithBody(ctx, policyNumber, partyId, params, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerUpdateBeneficiaryResponse(rsp)
}

func (c *ClientWithResponses) AppControllerUpdateBeneficiaryWithResponse(ctx context.Context, policyNumber string, partyId string, params *AppControllerUpdateBeneficiaryParams, body AppControllerUpdateBeneficiaryJSONRequestBody, reqEditors ...RequestEditorFn) (*AppControllerUpdateBeneficiaryResponse, error) {
	rsp, err := c.AppControllerUpdateBeneficiary(ctx, policyNumber, partyId, params, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerUpdateBeneficiaryResponse(rsp)
}

// AppControllerUpdateCommunicationPreferenceWithResponse request returning *AppControllerUpdateCommunicationPreferenceResponse
func (c *ClientWithResponses) AppControllerUpdateCommunicationPreferenceWithResponse(ctx context.Context, policyNumber string, partyId string, params *AppControllerUpdateCommunicationPreferenceParams, reqEditors ...RequestEditorFn) (*AppControllerUpdateCommunicationPreferenceResponse, error) {
	rsp, err := c.AppControllerUpdateCommunicationPreference(ctx, policyNumber, partyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerUpdateCommunicationPreferenceResponse(rsp)
}

// AppControllerCreateEmailAddressWithResponse request returning *AppControllerCreateEmailAddressResponse
func (c *ClientWithResponses) AppControllerCreateEmailAddressWithResponse(ctx context.Context, policyNumber string, partyId string, params *AppControllerCreateEmailAddressParams, reqEditors ...RequestEditorFn) (*AppControllerCreateEmailAddressResponse, error) {
	rsp, err := c.AppControllerCreateEmailAddress(ctx, policyNumber, partyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerCreateEmailAddressResponse(rsp)
}

// AppControllerAddEndDateToEmailAddressWithResponse request returning *AppControllerAddEndDateToEmailAddressResponse
func (c *ClientWithResponses) AppControllerAddEndDateToEmailAddressWithResponse(ctx context.Context, policyNumber string, partyId string, emailId string, params *AppControllerAddEndDateToEmailAddressParams, reqEditors ...RequestEditorFn) (*AppControllerAddEndDateToEmailAddressResponse, error) {
	rsp, err := c.AppControllerAddEndDateToEmailAddress(ctx, policyNumber, partyId, emailId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerAddEndDateToEmailAddressResponse(rsp)
}

// AppControllerAddEndDateAndCreateEmailAddressWithResponse request returning *AppControllerAddEndDateAndCreateEmailAddressResponse
func (c *ClientWithResponses) AppControllerAddEndDateAndCreateEmailAddressWithResponse(ctx context.Context, policyNumber string, partyId string, emailId string, params *AppControllerAddEndDateAndCreateEmailAddressParams, reqEditors ...RequestEditorFn) (*AppControllerAddEndDateAndCreateEmailAddressResponse, error) {
	rsp, err := c.AppControllerAddEndDateAndCreateEmailAddress(ctx, policyNumber, partyId, emailId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerAddEndDateAndCreateEmailAddressResponse(rsp)
}

// AppControllerAddOwnerWithResponse request returning *AppControllerAddOwnerResponse
func (c *ClientWithResponses) AppControllerAddOwnerWithResponse(ctx context.Context, policyNumber string, partyId string, params *AppControllerAddOwnerParams, reqEditors ...RequestEditorFn) (*AppControllerAddOwnerResponse, error) {
	rsp, err := c.AppControllerAddOwner(ctx, policyNumber, partyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerAddOwnerResponse(rsp)
}

// AppControllerUpdatePartyNameWithResponse request returning *AppControllerUpdatePartyNameResponse
func (c *ClientWithResponses) AppControllerUpdatePartyNameWithResponse(ctx context.Context, policyNumber string, partyId string, params *AppControllerUpdatePartyNameParams, reqEditors ...RequestEditorFn) (*AppControllerUpdatePartyNameResponse, error) {
	rsp, err := c.AppControllerUpdatePartyName(ctx, policyNumber, partyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerUpdatePartyNameResponse(rsp)
}

// AppControllerAddPayeeWithResponse request returning *AppControllerAddPayeeResponse
func (c *ClientWithResponses) AppControllerAddPayeeWithResponse(ctx context.Context, policyNumber string, partyId string, params *AppControllerAddPayeeParams, reqEditors ...RequestEditorFn) (*AppControllerAddPayeeResponse, error) {
	rsp, err := c.AppControllerAddPayee(ctx, policyNumber, partyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerAddPayeeResponse(rsp)
}

// AppControllerAddPayorWithResponse request returning *AppControllerAddPayorResponse
func (c *ClientWithResponses) AppControllerAddPayorWithResponse(ctx context.Context, policyNumber string, partyId string, params *AppControllerAddPayorParams, reqEditors ...RequestEditorFn) (*AppControllerAddPayorResponse, error) {
	rsp, err := c.AppControllerAddPayor(ctx, policyNumber, partyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerAddPayorResponse(rsp)
}

// AppControllerUpdatePhoneNumberWithResponse request returning *AppControllerUpdatePhoneNumberResponse
func (c *ClientWithResponses) AppControllerUpdatePhoneNumberWithResponse(ctx context.Context, policyNumber string, partyId string, params *AppControllerUpdatePhoneNumberParams, reqEditors ...RequestEditorFn) (*AppControllerUpdatePhoneNumberResponse, error) {
	rsp, err := c.AppControllerUpdatePhoneNumber(ctx, policyNumber, partyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerUpdatePhoneNumberResponse(rsp)
}

// AppControllerAddEndDateToPhoneNumberWithResponse request returning *AppControllerAddEndDateToPhoneNumberResponse
func (c *ClientWithResponses) AppControllerAddEndDateToPhoneNumberWithResponse(ctx context.Context, policyNumber string, partyId string, phoneId string, params *AppControllerAddEndDateToPhoneNumberParams, reqEditors ...RequestEditorFn) (*AppControllerAddEndDateToPhoneNumberResponse, error) {
	rsp, err := c.AppControllerAddEndDateToPhoneNumber(ctx, policyNumber, partyId, phoneId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerAddEndDateToPhoneNumberResponse(rsp)
}

// AppControllerAddEndDateAndCreatePhoneNumberWithResponse request returning *AppControllerAddEndDateAndCreatePhoneNumberResponse
func (c *ClientWithResponses) AppControllerAddEndDateAndCreatePhoneNumberWithResponse(ctx context.Context, policyNumber string, partyId string, phoneId string, params *AppControllerAddEndDateAndCreatePhoneNumberParams, reqEditors ...RequestEditorFn) (*AppControllerAddEndDateAndCreatePhoneNumberResponse, error) {
	rsp, err := c.AppControllerAddEndDateAndCreatePhoneNumber(ctx, policyNumber, partyId, phoneId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerAddEndDateAndCreatePhoneNumberResponse(rsp)
}

// AppControllerAddTpdWithResponse request returning *AppControllerAddTpdResponse
func (c *ClientWithResponses) AppControllerAddTpdWithResponse(ctx context.Context, policyNumber string, partyId string, params *AppControllerAddTpdParams, reqEditors ...RequestEditorFn) (*AppControllerAddTpdResponse, error) {
	rsp, err := c.AppControllerAddTpd(ctx, policyNumber, partyId, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerAddTpdResponse(rsp)
}

// AppControllerGetPolicyRidersWithResponse request returning *AppControllerGetPolicyRidersResponse
func (c *ClientWithResponses) AppControllerGetPolicyRidersWithResponse(ctx context.Context, policyNumber string, params *AppControllerGetPolicyRidersParams, reqEditors ...RequestEditorFn) (*AppControllerGetPolicyRidersResponse, error) {
	rsp, err := c.AppControllerGetPolicyRiders(ctx, policyNumber, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerGetPolicyRidersResponse(rsp)
}

// AppControllerGetPolicySystematicProgramsWithResponse request returning *AppControllerGetPolicySystematicProgramsResponse
func (c *ClientWithResponses) AppControllerGetPolicySystematicProgramsWithResponse(ctx context.Context, policyNumber string, params *AppControllerGetPolicySystematicProgramsParams, reqEditors ...RequestEditorFn) (*AppControllerGetPolicySystematicProgramsResponse, error) {
	rsp, err := c.AppControllerGetPolicySystematicPrograms(ctx, policyNumber, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerGetPolicySystematicProgramsResponse(rsp)
}

// AppControllerGetPolicyTransactionDeltasWithResponse request returning *AppControllerGetPolicyTransactionDeltasResponse
func (c *ClientWithResponses) AppControllerGetPolicyTransactionDeltasWithResponse(ctx context.Context, policyNumber string, params *AppControllerGetPolicyTransactionDeltasParams, reqEditors ...RequestEditorFn) (*AppControllerGetPolicyTransactionDeltasResponse, error) {
	rsp, err := c.AppControllerGetPolicyTransactionDeltas(ctx, policyNumber, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerGetPolicyTransactionDeltasResponse(rsp)
}

// AppControllerGetPolicyTransactionsWithResponse request returning *AppControllerGetPolicyTransactionsResponse
func (c *ClientWithResponses) AppControllerGetPolicyTransactionsWithResponse(ctx context.Context, policyNumber string, params *AppControllerGetPolicyTransactionsParams, reqEditors ...RequestEditorFn) (*AppControllerGetPolicyTransactionsResponse, error) {
	rsp, err := c.AppControllerGetPolicyTransactions(ctx, policyNumber, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerGetPolicyTransactionsResponse(rsp)
}

// AppControllerGetPolicyVersionsWithResponse request returning *AppControllerGetPolicyVersionsResponse
func (c *ClientWithResponses) AppControllerGetPolicyVersionsWithResponse(ctx context.Context, policyNumber string, params *AppControllerGetPolicyVersionsParams, reqEditors ...RequestEditorFn) (*AppControllerGetPolicyVersionsResponse, error) {
	rsp, err := c.AppControllerGetPolicyVersions(ctx, policyNumber, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerGetPolicyVersionsResponse(rsp)
}

// AppControllerGetPolicyVersionWithResponse request returning *AppControllerGetPolicyVersionResponse
func (c *ClientWithResponses) AppControllerGetPolicyVersionWithResponse(ctx context.Context, policyNumber string, version string, params *AppControllerGetPolicyVersionParams, reqEditors ...RequestEditorFn) (*AppControllerGetPolicyVersionResponse, error) {
	rsp, err := c.AppControllerGetPolicyVersion(ctx, policyNumber, version, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseAppControllerGetPolicyVersionResponse(rsp)
}

// ParseAppControllerGetPolicyAccountInfoResponse parses an HTTP response from a AppControllerGetPolicyAccountInfoWithResponse call
func ParseAppControllerGetPolicyAccountInfoResponse(rsp *http.Response) (*AppControllerGetPolicyAccountInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerGetPolicyAccountInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest AccountInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAppControllerGetPolicyCashValuesResponse parses an HTTP response from a AppControllerGetPolicyCashValuesWithResponse call
func ParseAppControllerGetPolicyCashValuesResponse(rsp *http.Response) (*AppControllerGetPolicyCashValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerGetPolicyCashValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest CashValues
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAppControllerGetPolicyFundValuesResponse parses an HTTP response from a AppControllerGetPolicyFundValuesWithResponse call
func ParseAppControllerGetPolicyFundValuesResponse(rsp *http.Response) (*AppControllerGetPolicyFundValuesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerGetPolicyFundValuesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest FundValues
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAppControllerGetPolicyLinkBankingResponse parses an HTTP response from a AppControllerGetPolicyLinkBankingWithResponse call
func ParseAppControllerGetPolicyLinkBankingResponse(rsp *http.Response) (*AppControllerGetPolicyLinkBankingResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerGetPolicyLinkBankingResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LinkBanking
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAppControllerGetPolicyNotesInfoResponse parses an HTTP response from a AppControllerGetPolicyNotesInfoWithResponse call
func ParseAppControllerGetPolicyNotesInfoResponse(rsp *http.Response) (*AppControllerGetPolicyNotesInfoResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerGetPolicyNotesInfoResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest NotesInfo
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAppControllerGetPolicyPeopleResponse parses an HTTP response from a AppControllerGetPolicyPeopleWithResponse call
func ParseAppControllerGetPolicyPeopleResponse(rsp *http.Response) (*AppControllerGetPolicyPeopleResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerGetPolicyPeopleResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest People
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAppControllerCreatePolicyQuoteResponse parses an HTTP response from a AppControllerCreatePolicyQuoteWithResponse call
func ParseAppControllerCreatePolicyQuoteResponse(rsp *http.Response) (*AppControllerCreatePolicyQuoteResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerCreatePolicyQuoteResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest Quote
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParsePolicySearchControllerSearchPoliciesResponse parses an HTTP response from a PolicySearchControllerSearchPoliciesWithResponse call
func ParsePolicySearchControllerSearchPoliciesResponse(rsp *http.Response) (*PolicySearchControllerSearchPoliciesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &PolicySearchControllerSearchPoliciesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAppControllerGetTransactionHistoryResponse parses an HTTP response from a AppControllerGetTransactionHistoryWithResponse call
func ParseAppControllerGetTransactionHistoryResponse(rsp *http.Response) (*AppControllerGetTransactionHistoryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerGetTransactionHistoryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LinkBanking
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAppControllerGetPolicyResponse parses an HTTP response from a AppControllerGetPolicyWithResponse call
func ParseAppControllerGetPolicyResponse(rsp *http.Response) (*AppControllerGetPolicyResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerGetPolicyResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAppControllerGetPolicyCoverageResponse parses an HTTP response from a AppControllerGetPolicyCoverageWithResponse call
func ParseAppControllerGetPolicyCoverageResponse(rsp *http.Response) (*AppControllerGetPolicyCoverageResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerGetPolicyCoverageResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAppControllerGetPolicyDistributionResponse parses an HTTP response from a AppControllerGetPolicyDistributionWithResponse call
func ParseAppControllerGetPolicyDistributionResponse(rsp *http.Response) (*AppControllerGetPolicyDistributionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerGetPolicyDistributionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAppControllerGetPolicyFeaturesResponse parses an HTTP response from a AppControllerGetPolicyFeaturesWithResponse call
func ParseAppControllerGetPolicyFeaturesResponse(rsp *http.Response) (*AppControllerGetPolicyFeaturesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerGetPolicyFeaturesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAppControllerGetPolicyMetricsResponse parses an HTTP response from a AppControllerGetPolicyMetricsWithResponse call
func ParseAppControllerGetPolicyMetricsResponse(rsp *http.Response) (*AppControllerGetPolicyMetricsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerGetPolicyMetricsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest MetricsResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	}

	return response, nil
}

// ParseAppControllerGetPolicyPartiesResponse parses an HTTP response from a AppControllerGetPolicyPartiesWithResponse call
func ParseAppControllerGetPolicyPartiesResponse(rsp *http.Response) (*AppControllerGetPolicyPartiesResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerGetPolicyPartiesResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAppControllerCreateAddressResponse parses an HTTP response from a AppControllerCreateAddressWithResponse call
func ParseAppControllerCreateAddressResponse(rsp *http.Response) (*AppControllerCreateAddressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerCreateAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAppControllerAddEndDateToAddressResponse parses an HTTP response from a AppControllerAddEndDateToAddressWithResponse call
func ParseAppControllerAddEndDateToAddressResponse(rsp *http.Response) (*AppControllerAddEndDateToAddressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerAddEndDateToAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAppControllerAddEndDateAndCreateAddressResponse parses an HTTP response from a AppControllerAddEndDateAndCreateAddressWithResponse call
func ParseAppControllerAddEndDateAndCreateAddressResponse(rsp *http.Response) (*AppControllerAddEndDateAndCreateAddressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerAddEndDateAndCreateAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAppControllerDeleteBeneficiaryResponse parses an HTTP response from a AppControllerDeleteBeneficiaryWithResponse call
func ParseAppControllerDeleteBeneficiaryResponse(rsp *http.Response) (*AppControllerDeleteBeneficiaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerDeleteBeneficiaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAppControllerAddBeneficiaryResponse parses an HTTP response from a AppControllerAddBeneficiaryWithResponse call
func ParseAppControllerAddBeneficiaryResponse(rsp *http.Response) (*AppControllerAddBeneficiaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerAddBeneficiaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAppControllerUpdateBeneficiaryResponse parses an HTTP response from a AppControllerUpdateBeneficiaryWithResponse call
func ParseAppControllerUpdateBeneficiaryResponse(rsp *http.Response) (*AppControllerUpdateBeneficiaryResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerUpdateBeneficiaryResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAppControllerUpdateCommunicationPreferenceResponse parses an HTTP response from a AppControllerUpdateCommunicationPreferenceWithResponse call
func ParseAppControllerUpdateCommunicationPreferenceResponse(rsp *http.Response) (*AppControllerUpdateCommunicationPreferenceResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerUpdateCommunicationPreferenceResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAppControllerCreateEmailAddressResponse parses an HTTP response from a AppControllerCreateEmailAddressWithResponse call
func ParseAppControllerCreateEmailAddressResponse(rsp *http.Response) (*AppControllerCreateEmailAddressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerCreateEmailAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAppControllerAddEndDateToEmailAddressResponse parses an HTTP response from a AppControllerAddEndDateToEmailAddressWithResponse call
func ParseAppControllerAddEndDateToEmailAddressResponse(rsp *http.Response) (*AppControllerAddEndDateToEmailAddressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerAddEndDateToEmailAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAppControllerAddEndDateAndCreateEmailAddressResponse parses an HTTP response from a AppControllerAddEndDateAndCreateEmailAddressWithResponse call
func ParseAppControllerAddEndDateAndCreateEmailAddressResponse(rsp *http.Response) (*AppControllerAddEndDateAndCreateEmailAddressResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerAddEndDateAndCreateEmailAddressResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAppControllerAddOwnerResponse parses an HTTP response from a AppControllerAddOwnerWithResponse call
func ParseAppControllerAddOwnerResponse(rsp *http.Response) (*AppControllerAddOwnerResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerAddOwnerResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAppControllerUpdatePartyNameResponse parses an HTTP response from a AppControllerUpdatePartyNameWithResponse call
func ParseAppControllerUpdatePartyNameResponse(rsp *http.Response) (*AppControllerUpdatePartyNameResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerUpdatePartyNameResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAppControllerAddPayeeResponse parses an HTTP response from a AppControllerAddPayeeWithResponse call
func ParseAppControllerAddPayeeResponse(rsp *http.Response) (*AppControllerAddPayeeResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerAddPayeeResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAppControllerAddPayorResponse parses an HTTP response from a AppControllerAddPayorWithResponse call
func ParseAppControllerAddPayorResponse(rsp *http.Response) (*AppControllerAddPayorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerAddPayorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAppControllerUpdatePhoneNumberResponse parses an HTTP response from a AppControllerUpdatePhoneNumberWithResponse call
func ParseAppControllerUpdatePhoneNumberResponse(rsp *http.Response) (*AppControllerUpdatePhoneNumberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerUpdatePhoneNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAppControllerAddEndDateToPhoneNumberResponse parses an HTTP response from a AppControllerAddEndDateToPhoneNumberWithResponse call
func ParseAppControllerAddEndDateToPhoneNumberResponse(rsp *http.Response) (*AppControllerAddEndDateToPhoneNumberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerAddEndDateToPhoneNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAppControllerAddEndDateAndCreatePhoneNumberResponse parses an HTTP response from a AppControllerAddEndDateAndCreatePhoneNumberWithResponse call
func ParseAppControllerAddEndDateAndCreatePhoneNumberResponse(rsp *http.Response) (*AppControllerAddEndDateAndCreatePhoneNumberResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerAddEndDateAndCreatePhoneNumberResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAppControllerAddTpdResponse parses an HTTP response from a AppControllerAddTpdWithResponse call
func ParseAppControllerAddTpdResponse(rsp *http.Response) (*AppControllerAddTpdResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerAddTpdResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAppControllerGetPolicyRidersResponse parses an HTTP response from a AppControllerGetPolicyRidersWithResponse call
func ParseAppControllerGetPolicyRidersResponse(rsp *http.Response) (*AppControllerGetPolicyRidersResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerGetPolicyRidersResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAppControllerGetPolicySystematicProgramsResponse parses an HTTP response from a AppControllerGetPolicySystematicProgramsWithResponse call
func ParseAppControllerGetPolicySystematicProgramsResponse(rsp *http.Response) (*AppControllerGetPolicySystematicProgramsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerGetPolicySystematicProgramsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAppControllerGetPolicyTransactionDeltasResponse parses an HTTP response from a AppControllerGetPolicyTransactionDeltasWithResponse call
func ParseAppControllerGetPolicyTransactionDeltasResponse(rsp *http.Response) (*AppControllerGetPolicyTransactionDeltasResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerGetPolicyTransactionDeltasResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAppControllerGetPolicyTransactionsResponse parses an HTTP response from a AppControllerGetPolicyTransactionsWithResponse call
func ParseAppControllerGetPolicyTransactionsResponse(rsp *http.Response) (*AppControllerGetPolicyTransactionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerGetPolicyTransactionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAppControllerGetPolicyVersionsResponse parses an HTTP response from a AppControllerGetPolicyVersionsWithResponse call
func ParseAppControllerGetPolicyVersionsResponse(rsp *http.Response) (*AppControllerGetPolicyVersionsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerGetPolicyVersionsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ParseAppControllerGetPolicyVersionResponse parses an HTTP response from a AppControllerGetPolicyVersionWithResponse call
func ParseAppControllerGetPolicyVersionResponse(rsp *http.Response) (*AppControllerGetPolicyVersionResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &AppControllerGetPolicyVersionResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	return response, nil
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /policy/v1/policies/accountInfo)
	AppControllerGetPolicyAccountInfo(ctx echo.Context, params AppControllerGetPolicyAccountInfoParams) error

	// (GET /policy/v1/policies/cashvalues)
	AppControllerGetPolicyCashValues(ctx echo.Context, params AppControllerGetPolicyCashValuesParams) error

	// (GET /policy/v1/policies/fundvalues)
	AppControllerGetPolicyFundValues(ctx echo.Context, params AppControllerGetPolicyFundValuesParams) error

	// (GET /policy/v1/policies/linkbanking)
	AppControllerGetPolicyLinkBanking(ctx echo.Context, params AppControllerGetPolicyLinkBankingParams) error

	// (GET /policy/v1/policies/notesinfo)
	AppControllerGetPolicyNotesInfo(ctx echo.Context, params AppControllerGetPolicyNotesInfoParams) error

	// (GET /policy/v1/policies/party)
	AppControllerGetPolicyPeople(ctx echo.Context, params AppControllerGetPolicyPeopleParams) error

	// (POST /policy/v1/policies/quote)
	AppControllerCreatePolicyQuote(ctx echo.Context, params AppControllerCreatePolicyQuoteParams) error

	// (POST /policy/v1/policies/search)
	PolicySearchControllerSearchPolicies(ctx echo.Context, params PolicySearchControllerSearchPoliciesParams) error

	// (GET /policy/v1/policies/transactionHistory)
	AppControllerGetTransactionHistory(ctx echo.Context, params AppControllerGetTransactionHistoryParams) error

	// (GET /policy/v1/policies/{policyNumber})
	AppControllerGetPolicy(ctx echo.Context, policyNumber string, params AppControllerGetPolicyParams) error

	// (GET /policy/v1/policies/{policyNumber}/coverage)
	AppControllerGetPolicyCoverage(ctx echo.Context, policyNumber string, params AppControllerGetPolicyCoverageParams) error

	// (GET /policy/v1/policies/{policyNumber}/distribution)
	AppControllerGetPolicyDistribution(ctx echo.Context, policyNumber string, params AppControllerGetPolicyDistributionParams) error

	// (GET /policy/v1/policies/{policyNumber}/features)
	AppControllerGetPolicyFeatures(ctx echo.Context, policyNumber string, params AppControllerGetPolicyFeaturesParams) error

	// (POST /policy/v1/policies/{policyNumber}/metrics)
	AppControllerGetPolicyMetrics(ctx echo.Context, policyNumber string, params AppControllerGetPolicyMetricsParams) error

	// (GET /policy/v1/policies/{policyNumber}/parties)
	AppControllerGetPolicyParties(ctx echo.Context, policyNumber string, params AppControllerGetPolicyPartiesParams) error

	// (POST /policy/v1/policies/{policyNumber}/parties/{partyId}/address)
	AppControllerCreateAddress(ctx echo.Context, policyNumber string, partyId string, params AppControllerCreateAddressParams) error

	// (DELETE /policy/v1/policies/{policyNumber}/parties/{partyId}/address/{addressId})
	AppControllerAddEndDateToAddress(ctx echo.Context, policyNumber string, partyId string, addressId string, params AppControllerAddEndDateToAddressParams) error

	// (PUT /policy/v1/policies/{policyNumber}/parties/{partyId}/address/{addressId})
	AppControllerAddEndDateAndCreateAddress(ctx echo.Context, policyNumber string, partyId string, addressId string, params AppControllerAddEndDateAndCreateAddressParams) error

	// (DELETE /policy/v1/policies/{policyNumber}/parties/{partyId}/beneficiary)
	AppControllerDeleteBeneficiary(ctx echo.Context, policyNumber string, partyId string, params AppControllerDeleteBeneficiaryParams) error

	// (POST /policy/v1/policies/{policyNumber}/parties/{partyId}/beneficiary)
	AppControllerAddBeneficiary(ctx echo.Context, policyNumber string, partyId string, params AppControllerAddBeneficiaryParams) error

	// (PUT /policy/v1/policies/{policyNumber}/parties/{partyId}/beneficiary)
	AppControllerUpdateBeneficiary(ctx echo.Context, policyNumber string, partyId string, params AppControllerUpdateBeneficiaryParams) error

	// (POST /policy/v1/policies/{policyNumber}/parties/{partyId}/communicationpreference)
	AppControllerUpdateCommunicationPreference(ctx echo.Context, policyNumber string, partyId string, params AppControllerUpdateCommunicationPreferenceParams) error

	// (POST /policy/v1/policies/{policyNumber}/parties/{partyId}/emailaddress)
	AppControllerCreateEmailAddress(ctx echo.Context, policyNumber string, partyId string, params AppControllerCreateEmailAddressParams) error

	// (DELETE /policy/v1/policies/{policyNumber}/parties/{partyId}/emailaddress/{emailId})
	AppControllerAddEndDateToEmailAddress(ctx echo.Context, policyNumber string, partyId string, emailId string, params AppControllerAddEndDateToEmailAddressParams) error

	// (PUT /policy/v1/policies/{policyNumber}/parties/{partyId}/emailaddress/{emailId})
	AppControllerAddEndDateAndCreateEmailAddress(ctx echo.Context, policyNumber string, partyId string, emailId string, params AppControllerAddEndDateAndCreateEmailAddressParams) error

	// (POST /policy/v1/policies/{policyNumber}/parties/{partyId}/owner)
	AppControllerAddOwner(ctx echo.Context, policyNumber string, partyId string, params AppControllerAddOwnerParams) error

	// (POST /policy/v1/policies/{policyNumber}/parties/{partyId}/partyname)
	AppControllerUpdatePartyName(ctx echo.Context, policyNumber string, partyId string, params AppControllerUpdatePartyNameParams) error

	// (POST /policy/v1/policies/{policyNumber}/parties/{partyId}/payee)
	AppControllerAddPayee(ctx echo.Context, policyNumber string, partyId string, params AppControllerAddPayeeParams) error

	// (POST /policy/v1/policies/{policyNumber}/parties/{partyId}/payor)
	AppControllerAddPayor(ctx echo.Context, policyNumber string, partyId string, params AppControllerAddPayorParams) error

	// (POST /policy/v1/policies/{policyNumber}/parties/{partyId}/phone)
	AppControllerUpdatePhoneNumber(ctx echo.Context, policyNumber string, partyId string, params AppControllerUpdatePhoneNumberParams) error

	// (DELETE /policy/v1/policies/{policyNumber}/parties/{partyId}/phone/{phoneId})
	AppControllerAddEndDateToPhoneNumber(ctx echo.Context, policyNumber string, partyId string, phoneId string, params AppControllerAddEndDateToPhoneNumberParams) error

	// (PUT /policy/v1/policies/{policyNumber}/parties/{partyId}/phone/{phoneId})
	AppControllerAddEndDateAndCreatePhoneNumber(ctx echo.Context, policyNumber string, partyId string, phoneId string, params AppControllerAddEndDateAndCreatePhoneNumberParams) error

	// (POST /policy/v1/policies/{policyNumber}/parties/{partyId}/tpd)
	AppControllerAddTpd(ctx echo.Context, policyNumber string, partyId string, params AppControllerAddTpdParams) error

	// (GET /policy/v1/policies/{policyNumber}/riders)
	AppControllerGetPolicyRiders(ctx echo.Context, policyNumber string, params AppControllerGetPolicyRidersParams) error

	// (GET /policy/v1/policies/{policyNumber}/systematicPrograms)
	AppControllerGetPolicySystematicPrograms(ctx echo.Context, policyNumber string, params AppControllerGetPolicySystematicProgramsParams) error

	// (GET /policy/v1/policies/{policyNumber}/transactionDeltas)
	AppControllerGetPolicyTransactionDeltas(ctx echo.Context, policyNumber string, params AppControllerGetPolicyTransactionDeltasParams) error

	// (GET /policy/v1/policies/{policyNumber}/transactions)
	AppControllerGetPolicyTransactions(ctx echo.Context, policyNumber string, params AppControllerGetPolicyTransactionsParams) error

	// (GET /policy/v1/policies/{policyNumber}/versions)
	AppControllerGetPolicyVersions(ctx echo.Context, policyNumber string, params AppControllerGetPolicyVersionsParams) error

	// (GET /policy/v1/policies/{policyNumber}/versions/{version})
	AppControllerGetPolicyVersion(ctx echo.Context, policyNumber string, version string, params AppControllerGetPolicyVersionParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// AppControllerGetPolicyAccountInfo converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerGetPolicyAccountInfo(ctx echo.Context) error {
	var err error

	ctx.Set(Auth0Scopes, []string{"read:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerGetPolicyAccountInfoParams
	// ------------- Required query parameter "policyNumber" -------------

	err = runtime.BindQueryParameter("form", true, true, "policyNumber", ctx.QueryParams(), &params.PolicyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	// ------------- Required query parameter "clientCode" -------------

	err = runtime.BindQueryParameter("form", true, true, "clientCode", ctx.QueryParams(), &params.ClientCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clientCode: %s", err))
	}

	// ------------- Optional query parameter "planNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "planNumber", ctx.QueryParams(), &params.PlanNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter planNumber: %s", err))
	}

	// ------------- Optional query parameter "sourceSystem" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourceSystem", ctx.QueryParams(), &params.SourceSystem)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourceSystem: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerGetPolicyAccountInfo(ctx, params)
	return err
}

// AppControllerGetPolicyCashValues converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerGetPolicyCashValues(ctx echo.Context) error {
	var err error

	ctx.Set(Auth0Scopes, []string{"read:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerGetPolicyCashValuesParams
	// ------------- Required query parameter "policyNumber" -------------

	err = runtime.BindQueryParameter("form", true, true, "policyNumber", ctx.QueryParams(), &params.PolicyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	// ------------- Required query parameter "clientCode" -------------

	err = runtime.BindQueryParameter("form", true, true, "clientCode", ctx.QueryParams(), &params.ClientCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clientCode: %s", err))
	}

	// ------------- Optional query parameter "planNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "planNumber", ctx.QueryParams(), &params.PlanNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter planNumber: %s", err))
	}

	// ------------- Optional query parameter "asOfDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "asOfDate", ctx.QueryParams(), &params.AsOfDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asOfDate: %s", err))
	}

	// ------------- Optional query parameter "sourceSystem" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourceSystem", ctx.QueryParams(), &params.SourceSystem)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourceSystem: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerGetPolicyCashValues(ctx, params)
	return err
}

// AppControllerGetPolicyFundValues converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerGetPolicyFundValues(ctx echo.Context) error {
	var err error

	ctx.Set(Auth0Scopes, []string{"read:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerGetPolicyFundValuesParams
	// ------------- Required query parameter "policyNumber" -------------

	err = runtime.BindQueryParameter("form", true, true, "policyNumber", ctx.QueryParams(), &params.PolicyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	// ------------- Required query parameter "clientCode" -------------

	err = runtime.BindQueryParameter("form", true, true, "clientCode", ctx.QueryParams(), &params.ClientCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clientCode: %s", err))
	}

	// ------------- Optional query parameter "planNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "planNumber", ctx.QueryParams(), &params.PlanNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter planNumber: %s", err))
	}

	// ------------- Optional query parameter "asOfDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "asOfDate", ctx.QueryParams(), &params.AsOfDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter asOfDate: %s", err))
	}

	// ------------- Optional query parameter "sourceSystem" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourceSystem", ctx.QueryParams(), &params.SourceSystem)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourceSystem: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerGetPolicyFundValues(ctx, params)
	return err
}

// AppControllerGetPolicyLinkBanking converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerGetPolicyLinkBanking(ctx echo.Context) error {
	var err error

	ctx.Set(Auth0Scopes, []string{"read:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerGetPolicyLinkBankingParams
	// ------------- Required query parameter "policyNumber" -------------

	err = runtime.BindQueryParameter("form", true, true, "policyNumber", ctx.QueryParams(), &params.PolicyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	// ------------- Required query parameter "clientCode" -------------

	err = runtime.BindQueryParameter("form", true, true, "clientCode", ctx.QueryParams(), &params.ClientCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clientCode: %s", err))
	}

	// ------------- Required query parameter "partyId" -------------

	err = runtime.BindQueryParameter("form", true, true, "partyId", ctx.QueryParams(), &params.PartyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partyId: %s", err))
	}

	// ------------- Optional query parameter "effectiveDate" -------------

	err = runtime.BindQueryParameter("form", true, false, "effectiveDate", ctx.QueryParams(), &params.EffectiveDate)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter effectiveDate: %s", err))
	}

	// ------------- Optional query parameter "sourceSystem" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourceSystem", ctx.QueryParams(), &params.SourceSystem)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourceSystem: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerGetPolicyLinkBanking(ctx, params)
	return err
}

// AppControllerGetPolicyNotesInfo converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerGetPolicyNotesInfo(ctx echo.Context) error {
	var err error

	ctx.Set(Auth0Scopes, []string{"read:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerGetPolicyNotesInfoParams
	// ------------- Required query parameter "policyNumber" -------------

	err = runtime.BindQueryParameter("form", true, true, "policyNumber", ctx.QueryParams(), &params.PolicyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	// ------------- Required query parameter "clientCode" -------------

	err = runtime.BindQueryParameter("form", true, true, "clientCode", ctx.QueryParams(), &params.ClientCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clientCode: %s", err))
	}

	// ------------- Optional query parameter "sourceSystem" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourceSystem", ctx.QueryParams(), &params.SourceSystem)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourceSystem: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "orderBy" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderBy", ctx.QueryParams(), &params.OrderBy)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderBy: %s", err))
	}

	// ------------- Optional query parameter "orderByDirection" -------------

	err = runtime.BindQueryParameter("form", true, false, "orderByDirection", ctx.QueryParams(), &params.OrderByDirection)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter orderByDirection: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerGetPolicyNotesInfo(ctx, params)
	return err
}

// AppControllerGetPolicyPeople converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerGetPolicyPeople(ctx echo.Context) error {
	var err error

	ctx.Set(Auth0Scopes, []string{"read:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerGetPolicyPeopleParams
	// ------------- Required query parameter "policyNumber" -------------

	err = runtime.BindQueryParameter("form", true, true, "policyNumber", ctx.QueryParams(), &params.PolicyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	// ------------- Required query parameter "clientCode" -------------

	err = runtime.BindQueryParameter("form", true, true, "clientCode", ctx.QueryParams(), &params.ClientCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clientCode: %s", err))
	}

	// ------------- Optional query parameter "planNumber" -------------

	err = runtime.BindQueryParameter("form", true, false, "planNumber", ctx.QueryParams(), &params.PlanNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter planNumber: %s", err))
	}

	// ------------- Optional query parameter "sourceSystem" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourceSystem", ctx.QueryParams(), &params.SourceSystem)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourceSystem: %s", err))
	}

	// ------------- Optional query parameter "includeAllAddresses" -------------

	err = runtime.BindQueryParameter("form", true, false, "includeAllAddresses", ctx.QueryParams(), &params.IncludeAllAddresses)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter includeAllAddresses: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerGetPolicyPeople(ctx, params)
	return err
}

// AppControllerCreatePolicyQuote converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerCreatePolicyQuote(ctx echo.Context) error {
	var err error

	ctx.Set(Auth0Scopes, []string{"read:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerCreatePolicyQuoteParams
	// ------------- Required query parameter "clientCode" -------------

	err = runtime.BindQueryParameter("form", true, true, "clientCode", ctx.QueryParams(), &params.ClientCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clientCode: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerCreatePolicyQuote(ctx, params)
	return err
}

// PolicySearchControllerSearchPolicies converts echo context to params.
func (w *ServerInterfaceWrapper) PolicySearchControllerSearchPolicies(ctx echo.Context) error {
	var err error

	ctx.Set(Auth0Scopes, []string{"read:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params PolicySearchControllerSearchPoliciesParams
	// ------------- Required query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, true, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Required query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, true, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PolicySearchControllerSearchPolicies(ctx, params)
	return err
}

// AppControllerGetTransactionHistory converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerGetTransactionHistory(ctx echo.Context) error {
	var err error

	ctx.Set(Auth0Scopes, []string{"read:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerGetTransactionHistoryParams
	// ------------- Required query parameter "policyNumber" -------------

	err = runtime.BindQueryParameter("form", true, true, "policyNumber", ctx.QueryParams(), &params.PolicyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	// ------------- Required query parameter "clientCode" -------------

	err = runtime.BindQueryParameter("form", true, true, "clientCode", ctx.QueryParams(), &params.ClientCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter clientCode: %s", err))
	}

	// ------------- Optional query parameter "sourceSystem" -------------

	err = runtime.BindQueryParameter("form", true, false, "sourceSystem", ctx.QueryParams(), &params.SourceSystem)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter sourceSystem: %s", err))
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", true, false, "offset", ctx.QueryParams(), &params.Offset)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter offset: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// ------------- Optional query parameter "transactionType" -------------

	err = runtime.BindQueryParameter("form", true, false, "transactionType", ctx.QueryParams(), &params.TransactionType)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter transactionType: %s", err))
	}

	// ------------- Optional query parameter "transactionStatus" -------------

	err = runtime.BindQueryParameter("form", true, false, "transactionStatus", ctx.QueryParams(), &params.TransactionStatus)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter transactionStatus: %s", err))
	}

	// ------------- Optional query parameter "typeDesc" -------------

	err = runtime.BindQueryParameter("form", true, false, "typeDesc", ctx.QueryParams(), &params.TypeDesc)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter typeDesc: %s", err))
	}

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerGetTransactionHistory(ctx, params)
	return err
}

// AppControllerGetPolicy converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerGetPolicy(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyNumber" -------------
	var policyNumber string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, ctx.Param("policyNumber"), &policyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	ctx.Set(Auth0Scopes, []string{"read:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerGetPolicyParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerGetPolicy(ctx, policyNumber, params)
	return err
}

// AppControllerGetPolicyCoverage converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerGetPolicyCoverage(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyNumber" -------------
	var policyNumber string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, ctx.Param("policyNumber"), &policyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	ctx.Set(Auth0Scopes, []string{"read:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerGetPolicyCoverageParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerGetPolicyCoverage(ctx, policyNumber, params)
	return err
}

// AppControllerGetPolicyDistribution converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerGetPolicyDistribution(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyNumber" -------------
	var policyNumber string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, ctx.Param("policyNumber"), &policyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	ctx.Set(Auth0Scopes, []string{"read:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerGetPolicyDistributionParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerGetPolicyDistribution(ctx, policyNumber, params)
	return err
}

// AppControllerGetPolicyFeatures converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerGetPolicyFeatures(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyNumber" -------------
	var policyNumber string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, ctx.Param("policyNumber"), &policyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	ctx.Set(Auth0Scopes, []string{"read:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerGetPolicyFeaturesParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerGetPolicyFeatures(ctx, policyNumber, params)
	return err
}

// AppControllerGetPolicyMetrics converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerGetPolicyMetrics(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyNumber" -------------
	var policyNumber string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, ctx.Param("policyNumber"), &policyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	ctx.Set(Auth0Scopes, []string{"read:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerGetPolicyMetricsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerGetPolicyMetrics(ctx, policyNumber, params)
	return err
}

// AppControllerGetPolicyParties converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerGetPolicyParties(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyNumber" -------------
	var policyNumber string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, ctx.Param("policyNumber"), &policyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	ctx.Set(Auth0Scopes, []string{"read:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerGetPolicyPartiesParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerGetPolicyParties(ctx, policyNumber, params)
	return err
}

// AppControllerCreateAddress converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerCreateAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyNumber" -------------
	var policyNumber string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, ctx.Param("policyNumber"), &policyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	// ------------- Path parameter "partyId" -------------
	var partyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "partyId", runtime.ParamLocationPath, ctx.Param("partyId"), &partyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partyId: %s", err))
	}

	ctx.Set(Auth0Scopes, []string{"write:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerCreateAddressParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerCreateAddress(ctx, policyNumber, partyId, params)
	return err
}

// AppControllerAddEndDateToAddress converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerAddEndDateToAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyNumber" -------------
	var policyNumber string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, ctx.Param("policyNumber"), &policyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	// ------------- Path parameter "partyId" -------------
	var partyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "partyId", runtime.ParamLocationPath, ctx.Param("partyId"), &partyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partyId: %s", err))
	}

	// ------------- Path parameter "addressId" -------------
	var addressId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "addressId", runtime.ParamLocationPath, ctx.Param("addressId"), &addressId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter addressId: %s", err))
	}

	ctx.Set(Auth0Scopes, []string{"admin:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerAddEndDateToAddressParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerAddEndDateToAddress(ctx, policyNumber, partyId, addressId, params)
	return err
}

// AppControllerAddEndDateAndCreateAddress converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerAddEndDateAndCreateAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyNumber" -------------
	var policyNumber string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, ctx.Param("policyNumber"), &policyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	// ------------- Path parameter "partyId" -------------
	var partyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "partyId", runtime.ParamLocationPath, ctx.Param("partyId"), &partyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partyId: %s", err))
	}

	// ------------- Path parameter "addressId" -------------
	var addressId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "addressId", runtime.ParamLocationPath, ctx.Param("addressId"), &addressId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter addressId: %s", err))
	}

	ctx.Set(Auth0Scopes, []string{"write:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerAddEndDateAndCreateAddressParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerAddEndDateAndCreateAddress(ctx, policyNumber, partyId, addressId, params)
	return err
}

// AppControllerDeleteBeneficiary converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerDeleteBeneficiary(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyNumber" -------------
	var policyNumber string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, ctx.Param("policyNumber"), &policyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	// ------------- Path parameter "partyId" -------------
	var partyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "partyId", runtime.ParamLocationPath, ctx.Param("partyId"), &partyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partyId: %s", err))
	}

	ctx.Set(Auth0Scopes, []string{"admin:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerDeleteBeneficiaryParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerDeleteBeneficiary(ctx, policyNumber, partyId, params)
	return err
}

// AppControllerAddBeneficiary converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerAddBeneficiary(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyNumber" -------------
	var policyNumber string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, ctx.Param("policyNumber"), &policyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	// ------------- Path parameter "partyId" -------------
	var partyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "partyId", runtime.ParamLocationPath, ctx.Param("partyId"), &partyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partyId: %s", err))
	}

	ctx.Set(Auth0Scopes, []string{"write:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerAddBeneficiaryParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerAddBeneficiary(ctx, policyNumber, partyId, params)
	return err
}

// AppControllerUpdateBeneficiary converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerUpdateBeneficiary(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyNumber" -------------
	var policyNumber string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, ctx.Param("policyNumber"), &policyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	// ------------- Path parameter "partyId" -------------
	var partyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "partyId", runtime.ParamLocationPath, ctx.Param("partyId"), &partyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partyId: %s", err))
	}

	ctx.Set(Auth0Scopes, []string{"write:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerUpdateBeneficiaryParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerUpdateBeneficiary(ctx, policyNumber, partyId, params)
	return err
}

// AppControllerUpdateCommunicationPreference converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerUpdateCommunicationPreference(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyNumber" -------------
	var policyNumber string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, ctx.Param("policyNumber"), &policyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	// ------------- Path parameter "partyId" -------------
	var partyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "partyId", runtime.ParamLocationPath, ctx.Param("partyId"), &partyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partyId: %s", err))
	}

	ctx.Set(Auth0Scopes, []string{"write:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerUpdateCommunicationPreferenceParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerUpdateCommunicationPreference(ctx, policyNumber, partyId, params)
	return err
}

// AppControllerCreateEmailAddress converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerCreateEmailAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyNumber" -------------
	var policyNumber string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, ctx.Param("policyNumber"), &policyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	// ------------- Path parameter "partyId" -------------
	var partyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "partyId", runtime.ParamLocationPath, ctx.Param("partyId"), &partyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partyId: %s", err))
	}

	ctx.Set(Auth0Scopes, []string{"write:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerCreateEmailAddressParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerCreateEmailAddress(ctx, policyNumber, partyId, params)
	return err
}

// AppControllerAddEndDateToEmailAddress converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerAddEndDateToEmailAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyNumber" -------------
	var policyNumber string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, ctx.Param("policyNumber"), &policyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	// ------------- Path parameter "partyId" -------------
	var partyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "partyId", runtime.ParamLocationPath, ctx.Param("partyId"), &partyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partyId: %s", err))
	}

	// ------------- Path parameter "emailId" -------------
	var emailId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "emailId", runtime.ParamLocationPath, ctx.Param("emailId"), &emailId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter emailId: %s", err))
	}

	ctx.Set(Auth0Scopes, []string{"admin:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerAddEndDateToEmailAddressParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerAddEndDateToEmailAddress(ctx, policyNumber, partyId, emailId, params)
	return err
}

// AppControllerAddEndDateAndCreateEmailAddress converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerAddEndDateAndCreateEmailAddress(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyNumber" -------------
	var policyNumber string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, ctx.Param("policyNumber"), &policyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	// ------------- Path parameter "partyId" -------------
	var partyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "partyId", runtime.ParamLocationPath, ctx.Param("partyId"), &partyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partyId: %s", err))
	}

	// ------------- Path parameter "emailId" -------------
	var emailId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "emailId", runtime.ParamLocationPath, ctx.Param("emailId"), &emailId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter emailId: %s", err))
	}

	ctx.Set(Auth0Scopes, []string{"write:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerAddEndDateAndCreateEmailAddressParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerAddEndDateAndCreateEmailAddress(ctx, policyNumber, partyId, emailId, params)
	return err
}

// AppControllerAddOwner converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerAddOwner(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyNumber" -------------
	var policyNumber string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, ctx.Param("policyNumber"), &policyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	// ------------- Path parameter "partyId" -------------
	var partyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "partyId", runtime.ParamLocationPath, ctx.Param("partyId"), &partyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partyId: %s", err))
	}

	ctx.Set(Auth0Scopes, []string{"write:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerAddOwnerParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerAddOwner(ctx, policyNumber, partyId, params)
	return err
}

// AppControllerUpdatePartyName converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerUpdatePartyName(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyNumber" -------------
	var policyNumber string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, ctx.Param("policyNumber"), &policyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	// ------------- Path parameter "partyId" -------------
	var partyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "partyId", runtime.ParamLocationPath, ctx.Param("partyId"), &partyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partyId: %s", err))
	}

	ctx.Set(Auth0Scopes, []string{"write:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerUpdatePartyNameParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerUpdatePartyName(ctx, policyNumber, partyId, params)
	return err
}

// AppControllerAddPayee converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerAddPayee(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyNumber" -------------
	var policyNumber string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, ctx.Param("policyNumber"), &policyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	// ------------- Path parameter "partyId" -------------
	var partyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "partyId", runtime.ParamLocationPath, ctx.Param("partyId"), &partyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partyId: %s", err))
	}

	ctx.Set(Auth0Scopes, []string{"write:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerAddPayeeParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerAddPayee(ctx, policyNumber, partyId, params)
	return err
}

// AppControllerAddPayor converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerAddPayor(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyNumber" -------------
	var policyNumber string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, ctx.Param("policyNumber"), &policyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	// ------------- Path parameter "partyId" -------------
	var partyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "partyId", runtime.ParamLocationPath, ctx.Param("partyId"), &partyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partyId: %s", err))
	}

	ctx.Set(Auth0Scopes, []string{"write:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerAddPayorParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerAddPayor(ctx, policyNumber, partyId, params)
	return err
}

// AppControllerUpdatePhoneNumber converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerUpdatePhoneNumber(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyNumber" -------------
	var policyNumber string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, ctx.Param("policyNumber"), &policyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	// ------------- Path parameter "partyId" -------------
	var partyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "partyId", runtime.ParamLocationPath, ctx.Param("partyId"), &partyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partyId: %s", err))
	}

	ctx.Set(Auth0Scopes, []string{"write:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerUpdatePhoneNumberParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerUpdatePhoneNumber(ctx, policyNumber, partyId, params)
	return err
}

// AppControllerAddEndDateToPhoneNumber converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerAddEndDateToPhoneNumber(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyNumber" -------------
	var policyNumber string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, ctx.Param("policyNumber"), &policyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	// ------------- Path parameter "partyId" -------------
	var partyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "partyId", runtime.ParamLocationPath, ctx.Param("partyId"), &partyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partyId: %s", err))
	}

	// ------------- Path parameter "phoneId" -------------
	var phoneId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "phoneId", runtime.ParamLocationPath, ctx.Param("phoneId"), &phoneId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter phoneId: %s", err))
	}

	ctx.Set(Auth0Scopes, []string{"admin:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerAddEndDateToPhoneNumberParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerAddEndDateToPhoneNumber(ctx, policyNumber, partyId, phoneId, params)
	return err
}

// AppControllerAddEndDateAndCreatePhoneNumber converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerAddEndDateAndCreatePhoneNumber(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyNumber" -------------
	var policyNumber string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, ctx.Param("policyNumber"), &policyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	// ------------- Path parameter "partyId" -------------
	var partyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "partyId", runtime.ParamLocationPath, ctx.Param("partyId"), &partyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partyId: %s", err))
	}

	// ------------- Path parameter "phoneId" -------------
	var phoneId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "phoneId", runtime.ParamLocationPath, ctx.Param("phoneId"), &phoneId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter phoneId: %s", err))
	}

	ctx.Set(Auth0Scopes, []string{"write:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerAddEndDateAndCreatePhoneNumberParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerAddEndDateAndCreatePhoneNumber(ctx, policyNumber, partyId, phoneId, params)
	return err
}

// AppControllerAddTpd converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerAddTpd(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyNumber" -------------
	var policyNumber string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, ctx.Param("policyNumber"), &policyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	// ------------- Path parameter "partyId" -------------
	var partyId string

	err = runtime.BindStyledParameterWithLocation("simple", false, "partyId", runtime.ParamLocationPath, ctx.Param("partyId"), &partyId)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter partyId: %s", err))
	}

	ctx.Set(Auth0Scopes, []string{"write:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerAddTpdParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerAddTpd(ctx, policyNumber, partyId, params)
	return err
}

// AppControllerGetPolicyRiders converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerGetPolicyRiders(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyNumber" -------------
	var policyNumber string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, ctx.Param("policyNumber"), &policyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	ctx.Set(Auth0Scopes, []string{"read:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerGetPolicyRidersParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerGetPolicyRiders(ctx, policyNumber, params)
	return err
}

// AppControllerGetPolicySystematicPrograms converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerGetPolicySystematicPrograms(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyNumber" -------------
	var policyNumber string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, ctx.Param("policyNumber"), &policyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	ctx.Set(Auth0Scopes, []string{"read:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerGetPolicySystematicProgramsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerGetPolicySystematicPrograms(ctx, policyNumber, params)
	return err
}

// AppControllerGetPolicyTransactionDeltas converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerGetPolicyTransactionDeltas(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyNumber" -------------
	var policyNumber string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, ctx.Param("policyNumber"), &policyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	ctx.Set(Auth0Scopes, []string{"read:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerGetPolicyTransactionDeltasParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerGetPolicyTransactionDeltas(ctx, policyNumber, params)
	return err
}

// AppControllerGetPolicyTransactions converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerGetPolicyTransactions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyNumber" -------------
	var policyNumber string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, ctx.Param("policyNumber"), &policyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	ctx.Set(Auth0Scopes, []string{"read:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerGetPolicyTransactionsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerGetPolicyTransactions(ctx, policyNumber, params)
	return err
}

// AppControllerGetPolicyVersions converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerGetPolicyVersions(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyNumber" -------------
	var policyNumber string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, ctx.Param("policyNumber"), &policyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	ctx.Set(Auth0Scopes, []string{"read:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerGetPolicyVersionsParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerGetPolicyVersions(ctx, policyNumber, params)
	return err
}

// AppControllerGetPolicyVersion converts echo context to params.
func (w *ServerInterfaceWrapper) AppControllerGetPolicyVersion(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "policyNumber" -------------
	var policyNumber string

	err = runtime.BindStyledParameterWithLocation("simple", false, "policyNumber", runtime.ParamLocationPath, ctx.Param("policyNumber"), &policyNumber)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter policyNumber: %s", err))
	}

	// ------------- Path parameter "version" -------------
	var version string

	err = runtime.BindStyledParameterWithLocation("simple", false, "version", runtime.ParamLocationPath, ctx.Param("version"), &version)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter version: %s", err))
	}

	ctx.Set(Auth0Scopes, []string{"read:policy"})

	// Parameter object where we will unmarshal all parameters from the context
	var params AppControllerGetPolicyVersionParams

	headers := ctx.Request().Header
	// ------------- Required header parameter "Authorization" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("Authorization")]; found {
		var Authorization string
		n := len(valueList)
		if n != 1 {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Expected one value for Authorization, got %d", n))
		}

		err = runtime.BindStyledParameterWithLocation("simple", false, "Authorization", runtime.ParamLocationHeader, valueList[0], &Authorization)
		if err != nil {
			return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter Authorization: %s", err))
		}

		params.Authorization = Authorization
	} else {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Header parameter Authorization is required, but not found"))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.AppControllerGetPolicyVersion(ctx, policyNumber, version, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/policy/v1/policies/accountInfo", wrapper.AppControllerGetPolicyAccountInfo)
	router.GET(baseURL+"/policy/v1/policies/cashvalues", wrapper.AppControllerGetPolicyCashValues)
	router.GET(baseURL+"/policy/v1/policies/fundvalues", wrapper.AppControllerGetPolicyFundValues)
	router.GET(baseURL+"/policy/v1/policies/linkbanking", wrapper.AppControllerGetPolicyLinkBanking)
	router.GET(baseURL+"/policy/v1/policies/notesinfo", wrapper.AppControllerGetPolicyNotesInfo)
	router.GET(baseURL+"/policy/v1/policies/party", wrapper.AppControllerGetPolicyPeople)
	router.POST(baseURL+"/policy/v1/policies/quote", wrapper.AppControllerCreatePolicyQuote)
	router.POST(baseURL+"/policy/v1/policies/search", wrapper.PolicySearchControllerSearchPolicies)
	router.GET(baseURL+"/policy/v1/policies/transactionHistory", wrapper.AppControllerGetTransactionHistory)
	router.GET(baseURL+"/policy/v1/policies/:policyNumber", wrapper.AppControllerGetPolicy)
	router.GET(baseURL+"/policy/v1/policies/:policyNumber/coverage", wrapper.AppControllerGetPolicyCoverage)
	router.GET(baseURL+"/policy/v1/policies/:policyNumber/distribution", wrapper.AppControllerGetPolicyDistribution)
	router.GET(baseURL+"/policy/v1/policies/:policyNumber/features", wrapper.AppControllerGetPolicyFeatures)
	router.POST(baseURL+"/policy/v1/policies/:policyNumber/metrics", wrapper.AppControllerGetPolicyMetrics)
	router.GET(baseURL+"/policy/v1/policies/:policyNumber/parties", wrapper.AppControllerGetPolicyParties)
	router.POST(baseURL+"/policy/v1/policies/:policyNumber/parties/:partyId/address", wrapper.AppControllerCreateAddress)
	router.DELETE(baseURL+"/policy/v1/policies/:policyNumber/parties/:partyId/address/:addressId", wrapper.AppControllerAddEndDateToAddress)
	router.PUT(baseURL+"/policy/v1/policies/:policyNumber/parties/:partyId/address/:addressId", wrapper.AppControllerAddEndDateAndCreateAddress)
	router.DELETE(baseURL+"/policy/v1/policies/:policyNumber/parties/:partyId/beneficiary", wrapper.AppControllerDeleteBeneficiary)
	router.POST(baseURL+"/policy/v1/policies/:policyNumber/parties/:partyId/beneficiary", wrapper.AppControllerAddBeneficiary)
	router.PUT(baseURL+"/policy/v1/policies/:policyNumber/parties/:partyId/beneficiary", wrapper.AppControllerUpdateBeneficiary)
	router.POST(baseURL+"/policy/v1/policies/:policyNumber/parties/:partyId/communicationpreference", wrapper.AppControllerUpdateCommunicationPreference)
	router.POST(baseURL+"/policy/v1/policies/:policyNumber/parties/:partyId/emailaddress", wrapper.AppControllerCreateEmailAddress)
	router.DELETE(baseURL+"/policy/v1/policies/:policyNumber/parties/:partyId/emailaddress/:emailId", wrapper.AppControllerAddEndDateToEmailAddress)
	router.PUT(baseURL+"/policy/v1/policies/:policyNumber/parties/:partyId/emailaddress/:emailId", wrapper.AppControllerAddEndDateAndCreateEmailAddress)
	router.POST(baseURL+"/policy/v1/policies/:policyNumber/parties/:partyId/owner", wrapper.AppControllerAddOwner)
	router.POST(baseURL+"/policy/v1/policies/:policyNumber/parties/:partyId/partyname", wrapper.AppControllerUpdatePartyName)
	router.POST(baseURL+"/policy/v1/policies/:policyNumber/parties/:partyId/payee", wrapper.AppControllerAddPayee)
	router.POST(baseURL+"/policy/v1/policies/:policyNumber/parties/:partyId/payor", wrapper.AppControllerAddPayor)
	router.POST(baseURL+"/policy/v1/policies/:policyNumber/parties/:partyId/phone", wrapper.AppControllerUpdatePhoneNumber)
	router.DELETE(baseURL+"/policy/v1/policies/:policyNumber/parties/:partyId/phone/:phoneId", wrapper.AppControllerAddEndDateToPhoneNumber)
	router.PUT(baseURL+"/policy/v1/policies/:policyNumber/parties/:partyId/phone/:phoneId", wrapper.AppControllerAddEndDateAndCreatePhoneNumber)
	router.POST(baseURL+"/policy/v1/policies/:policyNumber/parties/:partyId/tpd", wrapper.AppControllerAddTpd)
	router.GET(baseURL+"/policy/v1/policies/:policyNumber/riders", wrapper.AppControllerGetPolicyRiders)
	router.GET(baseURL+"/policy/v1/policies/:policyNumber/systematicPrograms", wrapper.AppControllerGetPolicySystematicPrograms)
	router.GET(baseURL+"/policy/v1/policies/:policyNumber/transactionDeltas", wrapper.AppControllerGetPolicyTransactionDeltas)
	router.GET(baseURL+"/policy/v1/policies/:policyNumber/transactions", wrapper.AppControllerGetPolicyTransactions)
	router.GET(baseURL+"/policy/v1/policies/:policyNumber/versions", wrapper.AppControllerGetPolicyVersions)
	router.GET(baseURL+"/policy/v1/policies/:policyNumber/versions/:version", wrapper.AppControllerGetPolicyVersion)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+wda1PbuPavZHzvx0Da3dnZGb6FQLvcCyUL2fZuO52OsE+Iii25kgxkGf77HT0cS7bk",
	"2DwKtPlEEh0dnfdDks1NFNMspwSI4NHOTcTjBWRIfRzHMS2IOCBzKr/mjObABAY9mOcpjpHAlOwhAfKn",
	"OWUZEtFOlCABWwJnEA0jscwh2om4YJicR7fDaIL44j1KCzXFjJIiOwOmRikRDMXiILGGrclm+J2e0AZy",
	"KpAoeADkMoB/D5BY7AKBORZegP35HGKBL6Ef029QDONMStPL9QHnRU+MaorkEbx0/qdgmCc4lvpRUBOa",
	"+CEPERd/5XKtpPvqh0DOxYLOZ8AyL0dH78dTRpMi9ovxCImCYbHsx/MRTfAcQ7JPEnqVAWnT8fEVAaaG",
	"sIBMffg3g3m0E/1rVFn8yJj7SIHLeQYRYgwt5fdpikhQdobFCRJwTtmyFYZmOSJLx+4qcRmgQ0xaF3qH",
	"stbx0wViMEkR98vkzwKls2UetoUSYA947AU4pQWL4XTJBSi9AymyaOdTdDiJPnsUNqMXQA72PKhuhxGD",
	"bwVm0uo+uXgbbu6EhdJ9a+zUiB82AlTYfGrm6GqjqWRXG5aFOE5pO3U9bDSCVC3wOO7jU67HqpwYY0fZ",
	"mrO6Dl+pKBQyVp5U6ZeefYVYSP2Ok4SBNrZadlDMWsNm6hmlKSBizd0nSb8gYOZJ5bz22qgBOBWIiTuh",
	"nqnfb1rHgx4ywWIZSDoFEYEYcYRwekASaa6U+cV1ymKzfCCEhHPBR5x38EAbv0eIDYUNa0p2xdcUVp3L",
	"miaN5Eo+NNWV1HzWt4vIRaA40ZVLS5VgIIKqVrj3/LEaLWXwCEytidXgGdZIcglwcYZYlegfidPeTqjY",
	"8tuhHArmKTl4B8c8xFzs4jQNZU8tvSMQC+qv66YFyyn303RCC4HJeVCEPo1KF1kxWkexVtmGmDrhdfG4",
	"unGk4LURlT1ijNhynKZUp76mxaDV2BRYDESgc38pniMmllOa4njprZZrcnHBh/51fHSvUpUnjxyUtVun",
	"Iq7CJOc1q7kaxRp5O0kHptDxel24jRnz4/mDtkVFVqRIhtspgwwXWUszYZcSHcHCC79hAB+wWCQMXaG0",
	"BZ0LeAIZwsRErAbs2w+7/t8LxBARAMmYkAKl2j3WgErBnRaMAUmAhRlpm3BAErheM+sIE5wVWaBBrGYc",
	"UkSmDJMY56mfkq6Y3oHoyNuJMeoSM5ZmdVaU/t8sFfpV8SsKJgvEAsFiRgVKK/17Yf4WyXrr/VskrWja",
	"G4eV3zWpHrpeW9eUWzKH/M2vvXV24vVJjzzq3DfFqn3H57whe2m3ji5+scbZAjEiHBGCfu6LxHuYnxWM",
	"g0yTeyAQTj1Zwi4E2/LDCu52GO1fYy5z9hQtAWQaD1R7DtwJTcHbzqpUDtCtJqxA/WT4F7XqXZ+g3jCa",
	"vSlI0pSO/FUrJVgDSpDgpoAcDMWeGmcrPPasYZ0CL/kl+L2LgArTPYuAGqJmEdA7x485B6Ejlr9Ur8Zb",
	"tRHYvJRDwcpbDgb1rxx993gaGBTAgIuTUH/ZN52wuJXSv0izIHFH/btboTntGcPI05KeS6EluXJxm8Ry",
	"WVe5TVU6qcmRqCV9nxUGbC8F5t9ZfUcFlFtVwU0KCdTPdOWMGVyL+xtAuzpWlHk4sagYGgn4JHaIyUWw",
	"X+4XSyxU9wwmdUxNje6O1zfxLRAP08a7Qw/dxhsBPNwOc7st+Tr1SszNLr29+64T79PyEQiG46ZySUiQ",
	"l6uU12aGGq1Jj3WmiWbMYApTFcquKEmwrAVROmU0f+0tglyYXzrA/Lq+WKgv3FymiTTMHpdlLnDRZBAC",
	"XuGz0Ezj8uqKBw0+WmeY3LIqWFlUuVgrUzynRG9cuVxZlHYKZcY0PSdcudqz6br95UC38yCjNfdv0E7C",
	"R6G9AnSnqDwxDUk4OuvTv2bljBkXLRVVmgYHD1HLzGN2Hj7JA8YpCVZq1XAggtZ7jQpdY7LFwtDi1SK+",
	"ItUntSlQs8dRS2XVsU8nJZbwHtu08ngnVCW8B5V0uuP5LmZi0T1j7WcIp37tP5JtHOEkSeFRTGdB9ely",
	"J0lqaI8cZTsa2EdPoXcFIifdoZIw00KH//07EtV6Bw7WWDxFTCyDgj1lcVAoZuw4l1nsIAmXPRqutoa1",
	"v4auAxsPM3T9AYvFHzRN+nhKbdq6GForrRS/Fed+Pm3BuhzW9e4aj6NeJ0iV1l/KY+jGN0dTpfNWp9Sl",
	"C1RhpSE9Nw5avugERTuUeANj6WluXFQ/tx0DK4CWGl+Nt/t3j8ywQlaf6hIydOn28ftnQYWH30mKgYjg",
	"TkaHu1ytl29mDBGOYvsGWhvMDIf2GziwgG+5O9Gd/MqasrYuqeTjufJiXSsxFDZZbjLo0OzT1SkgFi/0",
	"OV2wZJ63Jre0LX+tqSaHEeekd5U5t5wyrfxQovLx2AyJLnv715DlwdORNzjF5Lwlu8zQdXAvrNsO8Grz",
	"t6Sjtmq1Rgt7ixB7Lacrazlfw/o0RfF9GNfzh6UA3AVdgRgufALQt5es8+6gIZ+FzsS7VZPe2Z6ayFpm",
	"zaG61Yy2N5h3aSj9ZAwDUvBJ9gPCl+bapCvI40tgBJ8vxGQB8YW/hCnyXObZDhCUzLFzcdQKuZKCXUoK",
	"fgIxysMw+liPhwH2D8bJ14KLDIgIQx3iLLShrMaP3o/Dg65U3gCEQT9gBkEAOVYwsQA2YZBgMaMd9rEd",
	"cTeFWxOTxU5TyK4sfPILMjysm0aNXz93Xttzkq0vpAVLn8ApYZtv+6ZITDQu5E8tCaw8aVt/ElUeyekL",
	"uucMZafFWbh+0yDB8RNAnJI3lAXO921IFQ4hKSkIXx1o5pI+3cMi1D04kaS1XDJgdeuu6cGVTkOcQZaH",
	"tuWERGirtCERv3FV/DUtWUZyiNV94lPJpbHgQixeyQ80B3KQTCghEIu/WBrtRAshcr4zGv2DCcFoK4HL",
	"7YJvIzljO6bZaPsK0nTrgtArMpLTcbIVSy8/LxgyHJQ02MijYXS9dUHJ+VZJz1Y1WwHs3EQakdoILhIM",
	"JIYvcYqwapdRoW6arQZsBZU0S2JRjrc17duY6hli8SVTt9q4BD4DxIDJkVjVvF+wwnH29vjgZHry7ZeP",
	"5Ouk+Lr3v8nv+OLq5Df45/f3f/z29qOcwAryhZIvOYN5KoNMtCNYAcOIxzSXkv30ufxc0R2kbZQDyzDn",
	"mBIefVbpGJ2lkiGNNGdU0JimiuhzlsteSP6RCpdIzR8591bqGZvNzZgSgZQ8b4dRAjxm2FRZ0T4RwHKG",
	"OQxSuIR0oEvbAQd2iVUtJLBIpe4+KioHujQfnK7GpZlpXK+2X2+/ks4l1YhyHO1Ev26/2n4VDaMciYWy",
	"s5HGP7p8rT9h4CPkPshzDsIYojafgyTaicZ5rloQmqbA3oLQZNiPAKkbgSgDodz6002EJU3fClB34vUR",
	"R71wryym1Jp0e29y8+OL7R6pP7YFoEQRYtBJL6QM/1O6TS+MrmLzFJGBDqTDAaFisMI19EsmRWQllx7r",
	"cLXzMuBq62U4SGCOilTwgaCDw0lgLe7u1oRXkw5mjhiU9fzy6lVpz6ZqQtVjFKOvXCecCl/rtq5lO8pb",
	"XL6O/+uESmVRJkh+ihigZEfbUvRZUinQuXLKqbHpWqMrMfksP0Z8UZ2x9TB861Lqxu6fxO5lizdAfEDn",
	"AcSoulBRoe2yffwD+Zhlpk/lYvOCJHdyMevK18bFNi72XF3MMtOncrEUk4uz6iS0h4/Zd6FeopPVqUNM",
	"6KdLnpW/Qvl058DcBvHRDrVHQH9ah7Jt8qk8ilABHPfvh6orLS/Mm76j7XwHh8MkgesBnQ+uFsBAkq02",
	"xAdLWrABVydcg5J8Hy90Pucg+iVLnY/lomqHTC7KQBSMDDAZiAV0WTfFGe657NUCx4vBHEOaKD5pyaZC",
	"PTgLssgSYLvLvr0mE4MEM1AHipJXyVirJPUye+WcJ4sqlWc+VUxRyalnPDFXqDb174+3teLxZBALYBI7",
	"JnFaJDBAaTpA+nYK8AFlktnAumbKOE3H5QTf8qs3BjyqsxmzfSpP+7a6b0L5OlebMEACtLfpeyp+Z3tQ",
	"c35Ad/usgYGLXZosH0yDWhS37rGLpOX2Ec3GWvQJrEbn57DZaBvR92Mq+7Huy+DgTsWjG8+qYFmLqbps",
	"f9NagnRH9EgW6LuI1N0eXfu5l/UEDUZUd6v+wFyYFzx1yu6z5tRNjn/C3PsTNQyW1Q6EPvb2YbbAzOF4",
	"jzUs8x6sLm+tWWUF12Odvepb2Yx0Za+6zPrz7nLc2OHktmdr8t1SXY7E4gEi4OenSxSunEcxvQRmLgD2",
	"OXIsp/kF/0BievjQ/nwEn9QuRvUQfu1C0EYBd1LAHJAoWP+TwHLaRvB3FLz1NGiHnnglePOU6YuU+8N3",
	"JLUHib9zc1x/4vfhi4auxpSj1b3bPluZZtbGh+8n9tGNOeW8HSHr9apdd7qqh92+gxpq6J7F6WxToa97",
	"KfSKYQGPrNHRDSrftXqriUtB72i26HecJOYJyRl9oVp2MSHrfbMvOQSgJMNkncUMo7wQnTU8JsmLducf",
	"U9GPGhqsh7Q6h4Q9BWQ9prYJ+4/txOvz8DhJNhr5Xom4S1htPC76k+vk4Tun4AO5j3Cg86hBOKZZVhAj",
	"hJzBHBiQuOtZsxbDxMYxrXBsAsFzrMghQzi9S6Ol3i6y6bZeim5HN+rbXRuul6xtF5MRw6bnCvZcG13/",
	"RG0XXb36r1Nlr98UuAn3zzHcqw/lq1Y7l2vqjWHmhUIbrT5HrS4BujuoemX+RpXPVZWU9VIl3cTaZ6rK",
	"1SsOO8dZ552CG50+U52ObtSfu/ZJL1jLNUxaCps2KdgmbVT983RJIk+65+1Znmwi/DOI8Awn5g1sPa7x",
	"nOhJm1s8dxS6fqABCRybd9T1VcBpE8FGGXdUhvWwwB6kAvXVxawxf6OK+6viHlrYKODOCjCvEewr/Pfl",
	"tI3g64IfRtdb5WsoHfieGhndmE+3d9PNUxRbl6ulf3jvUrPZZSnbwnlla/P1pxaa8h9/VeikDMxv9j8K",
	"+Hz7/wAAAP//cu7LdIeHAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
